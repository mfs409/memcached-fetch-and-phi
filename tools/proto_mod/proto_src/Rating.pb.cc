// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Rating.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

namespace {

const ::google::protobuf::Descriptor* Rating_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rating_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rating_2eproto() {
  protobuf_AddDesc_Rating_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Rating.proto");
  GOOGLE_CHECK(file != NULL);
  Rating_descriptor_ = file->message_type(0);
  static const int Rating_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, subratings_),
  };
  Rating_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rating_descriptor_,
      Rating::default_instance_,
      Rating_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rating, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rating));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rating_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rating_descriptor_, &Rating::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Rating_2eproto() {
  delete Rating::default_instance_;
  delete Rating_reflection_;
}

void protobuf_AddDesc_Rating_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_AiringType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Rating.proto\022\tscheduler\032\020AiringType.pr"
    "oto\"<\n\006Rating\022\016\n\006scheme\030\001 \001(\t\022\016\n\006rating\030"
    "\002 \001(\t\022\022\n\nsubRatings\030\003 \003(\tB:\n+com.comcast"
    ".data.protobuf.message.schedulerB\013Rating"
    "Proto", 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rating.proto", &protobuf_RegisterTypes);
  Rating::default_instance_ = new Rating();
  Rating::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Rating_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Rating_2eproto {
  StaticDescriptorInitializer_Rating_2eproto() {
    protobuf_AddDesc_Rating_2eproto();
  }
} static_descriptor_initializer_Rating_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Rating::kSchemeFieldNumber;
const int Rating::kRatingFieldNumber;
const int Rating::kSubRatingsFieldNumber;
#endif  // !_MSC_VER

Rating::Rating()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rating::InitAsDefaultInstance() {
}

Rating::Rating(const Rating& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rating::SharedCtor() {
  _cached_size_ = 0;
  scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rating_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rating::~Rating() {
  SharedDtor();
}

void Rating::SharedDtor() {
  if (scheme_ != &::google::protobuf::internal::kEmptyString) {
    delete scheme_;
  }
  if (rating_ != &::google::protobuf::internal::kEmptyString) {
    delete rating_;
  }
  if (this != default_instance_) {
  }
}

void Rating::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rating::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rating_descriptor_;
}

const Rating& Rating::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rating_2eproto();  return *default_instance_;
}

Rating* Rating::default_instance_ = NULL;

Rating* Rating::New() const {
  return new Rating;
}

void Rating::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scheme()) {
      if (scheme_ != &::google::protobuf::internal::kEmptyString) {
        scheme_->clear();
      }
    }
    if (has_rating()) {
      if (rating_ != &::google::protobuf::internal::kEmptyString) {
        rating_->clear();
      }
    }
  }
  subratings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rating::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scheme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scheme().data(), this->scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rating;
        break;
      }
      
      // optional string rating = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rating().data(), this->rating().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subRatings;
        break;
      }
      
      // repeated string subRatings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subRatings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subratings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subratings(0).data(), this->subratings(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subRatings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rating::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scheme(), output);
  }
  
  // optional string rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rating().data(), this->rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rating(), output);
  }
  
  // repeated string subRatings = 3;
  for (int i = 0; i < this->subratings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->subratings(i).data(), this->subratings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subratings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rating::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scheme(), target);
  }
  
  // optional string rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rating().data(), this->rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rating(), target);
  }
  
  // repeated string subRatings = 3;
  for (int i = 0; i < this->subratings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subratings(i).data(), this->subratings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->subratings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rating::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scheme = 1;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheme());
    }
    
    // optional string rating = 2;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rating());
    }
    
  }
  // repeated string subRatings = 3;
  total_size += 1 * this->subratings_size();
  for (int i = 0; i < this->subratings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subratings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rating::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rating* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rating*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rating::MergeFrom(const Rating& from) {
  GOOGLE_CHECK_NE(&from, this);
  subratings_.MergeFrom(from.subratings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rating::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rating::CopyFrom(const Rating& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rating::IsInitialized() const {
  
  return true;
}

void Rating::Swap(Rating* other) {
  if (other != this) {
    std::swap(scheme_, other->scheme_);
    std::swap(rating_, other->rating_);
    subratings_.Swap(&other->subratings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rating::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rating_descriptor_;
  metadata.reflection = Rating_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
