// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Recording.proto

#ifndef PROTOBUF_Recording_2eproto__INCLUDED
#define PROTOBUF_Recording_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "NotRecordReason.pb.h"
#include "RecordingStatus.pb.h"
#include "RecordingType.pb.h"
#include "DeletePriority.pb.h"
#include "ListingData.pb.h"
#include "RecordingOptions.pb.h"
#include "RecordingSegment.pb.h"
// @@protoc_insertion_point(includes)

namespace scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Recording_2eproto();
void protobuf_AssignDesc_Recording_2eproto();
void protobuf_ShutdownFile_Recording_2eproto();

class Recording;

// ===================================================================

class Recording : public ::google::protobuf::Message {
 public:
  Recording();
  virtual ~Recording();
  
  Recording(const Recording& from);
  
  inline Recording& operator=(const Recording& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Recording& default_instance();
  
  void Swap(Recording* other);
  
  // implements Message ----------------------------------------------
  
  Recording* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Recording& from);
  void MergeFrom(const Recording& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string accountGuid = 2;
  inline bool has_accountguid() const;
  inline void clear_accountguid();
  static const int kAccountGuidFieldNumber = 2;
  inline const ::std::string& accountguid() const;
  inline void set_accountguid(const ::std::string& value);
  inline void set_accountguid(const char* value);
  inline void set_accountguid(const char* value, size_t size);
  inline ::std::string* mutable_accountguid();
  inline ::std::string* release_accountguid();
  
  // optional string deviceGuid = 3;
  inline bool has_deviceguid() const;
  inline void clear_deviceguid();
  static const int kDeviceGuidFieldNumber = 3;
  inline const ::std::string& deviceguid() const;
  inline void set_deviceguid(const ::std::string& value);
  inline void set_deviceguid(const char* value);
  inline void set_deviceguid(const char* value, size_t size);
  inline ::std::string* mutable_deviceguid();
  inline ::std::string* release_deviceguid();
  
  // optional string sourceGuid = 4;
  inline bool has_sourceguid() const;
  inline void clear_sourceguid();
  static const int kSourceGuidFieldNumber = 4;
  inline const ::std::string& sourceguid() const;
  inline void set_sourceguid(const ::std::string& value);
  inline void set_sourceguid(const char* value);
  inline void set_sourceguid(const char* value, size_t size);
  inline ::std::string* mutable_sourceguid();
  inline ::std::string* release_sourceguid();
  
  // optional string entityId = 5;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 5;
  inline const ::std::string& entityid() const;
  inline void set_entityid(const ::std::string& value);
  inline void set_entityid(const char* value);
  inline void set_entityid(const char* value, size_t size);
  inline ::std::string* mutable_entityid();
  inline ::std::string* release_entityid();
  
  // required int64 startTime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);
  
  // required int64 endTime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);
  
  // optional string stationGuid = 8;
  inline bool has_stationguid() const;
  inline void clear_stationguid();
  static const int kStationGuidFieldNumber = 8;
  inline const ::std::string& stationguid() const;
  inline void set_stationguid(const ::std::string& value);
  inline void set_stationguid(const char* value);
  inline void set_stationguid(const char* value, size_t size);
  inline ::std::string* mutable_stationguid();
  inline ::std::string* release_stationguid();
  
  // required int32 channelNumber = 9;
  inline bool has_channelnumber() const;
  inline void clear_channelnumber();
  static const int kChannelNumberFieldNumber = 9;
  inline ::google::protobuf::int32 channelnumber() const;
  inline void set_channelnumber(::google::protobuf::int32 value);
  
  // optional .scheduler.DeletePriority deletePriority = 10;
  inline bool has_deletepriority() const;
  inline void clear_deletepriority();
  static const int kDeletePriorityFieldNumber = 10;
  inline scheduler::DeletePriority deletepriority() const;
  inline void set_deletepriority(scheduler::DeletePriority value);
  
  // optional .scheduler.NotRecordReason notRecordReason = 11;
  inline bool has_notrecordreason() const;
  inline void clear_notrecordreason();
  static const int kNotRecordReasonFieldNumber = 11;
  inline scheduler::NotRecordReason notrecordreason() const;
  inline void set_notrecordreason(scheduler::NotRecordReason value);
  
  // optional .scheduler.RecordingStatus status = 12;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 12;
  inline scheduler::RecordingStatus status() const;
  inline void set_status(scheduler::RecordingStatus value);
  
  // optional .scheduler.RecordingType recordingType = 13;
  inline bool has_recordingtype() const;
  inline void clear_recordingtype();
  static const int kRecordingTypeFieldNumber = 13;
  inline scheduler::RecordingType recordingtype() const;
  inline void set_recordingtype(scheduler::RecordingType value);
  
  // optional string failureReason = 14;
  inline bool has_failurereason() const;
  inline void clear_failurereason();
  static const int kFailureReasonFieldNumber = 14;
  inline const ::std::string& failurereason() const;
  inline void set_failurereason(const ::std::string& value);
  inline void set_failurereason(const char* value);
  inline void set_failurereason(const char* value, size_t size);
  inline ::std::string* mutable_failurereason();
  inline ::std::string* release_failurereason();
  
  // optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
  inline bool has_schedulerrecordingoptions() const;
  inline void clear_schedulerrecordingoptions();
  static const int kSchedulerRecordingOptionsFieldNumber = 15;
  inline const ::scheduler::RecordingOptions& schedulerrecordingoptions() const;
  inline ::scheduler::RecordingOptions* mutable_schedulerrecordingoptions();
  inline ::scheduler::RecordingOptions* release_schedulerrecordingoptions();
  
  // repeated .scheduler.RecordingSegment segments = 16;
  inline int segments_size() const;
  inline void clear_segments();
  static const int kSegmentsFieldNumber = 16;
  inline const ::scheduler::RecordingSegment& segments(int index) const;
  inline ::scheduler::RecordingSegment* mutable_segments(int index);
  inline ::scheduler::RecordingSegment* add_segments();
  inline const ::google::protobuf::RepeatedPtrField< ::scheduler::RecordingSegment >&
      segments() const;
  inline ::google::protobuf::RepeatedPtrField< ::scheduler::RecordingSegment >*
      mutable_segments();
  
  // optional string title = 17;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 17;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string description = 18;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 18;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // required bool watched = 19;
  inline bool has_watched() const;
  inline void clear_watched();
  static const int kWatchedFieldNumber = 19;
  inline bool watched() const;
  inline void set_watched(bool value);
  
  // required bool payPerView = 20;
  inline bool has_payperview() const;
  inline void clear_payperview();
  static const int kPayPerViewFieldNumber = 20;
  inline bool payperview() const;
  inline void set_payperview(bool value);
  
  // required int32 entitlementId = 21;
  inline bool has_entitlementid() const;
  inline void clear_entitlementid();
  static const int kEntitlementIdFieldNumber = 21;
  inline ::google::protobuf::int32 entitlementid() const;
  inline void set_entitlementid(::google::protobuf::int32 value);
  
  // optional .scheduler.RecordingStatus undeleteStatus = 22;
  inline bool has_undeletestatus() const;
  inline void clear_undeletestatus();
  static const int kUndeleteStatusFieldNumber = 22;
  inline scheduler::RecordingStatus undeletestatus() const;
  inline void set_undeletestatus(scheduler::RecordingStatus value);
  
  // required int64 timeDeleted = 23;
  inline bool has_timedeleted() const;
  inline void clear_timedeleted();
  static const int kTimeDeletedFieldNumber = 23;
  inline ::google::protobuf::int64 timedeleted() const;
  inline void set_timedeleted(::google::protobuf::int64 value);
  
  // repeated .scheduler.ListingData listingDataList = 24;
  inline int listingdatalist_size() const;
  inline void clear_listingdatalist();
  static const int kListingDataListFieldNumber = 24;
  inline const ::scheduler::ListingData& listingdatalist(int index) const;
  inline ::scheduler::ListingData* mutable_listingdatalist(int index);
  inline ::scheduler::ListingData* add_listingdatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::scheduler::ListingData >&
      listingdatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::scheduler::ListingData >*
      mutable_listingdatalist();
  
  // optional string parentDeviceGuid = 25;
  inline bool has_parentdeviceguid() const;
  inline void clear_parentdeviceguid();
  static const int kParentDeviceGuidFieldNumber = 25;
  inline const ::std::string& parentdeviceguid() const;
  inline void set_parentdeviceguid(const ::std::string& value);
  inline void set_parentdeviceguid(const char* value);
  inline void set_parentdeviceguid(const char* value, size_t size);
  inline ::std::string* mutable_parentdeviceguid();
  inline ::std::string* release_parentdeviceguid();
  
  // optional string listingGuid = 26;
  inline bool has_listingguid() const;
  inline void clear_listingguid();
  static const int kListingGuidFieldNumber = 26;
  inline const ::std::string& listingguid() const;
  inline void set_listingguid(const ::std::string& value);
  inline void set_listingguid(const char* value);
  inline void set_listingguid(const char* value, size_t size);
  inline ::std::string* mutable_listingguid();
  inline ::std::string* release_listingguid();
  
  // @@protoc_insertion_point(class_scope:scheduler.Recording)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accountguid();
  inline void clear_has_accountguid();
  inline void set_has_deviceguid();
  inline void clear_has_deviceguid();
  inline void set_has_sourceguid();
  inline void clear_has_sourceguid();
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_stationguid();
  inline void clear_has_stationguid();
  inline void set_has_channelnumber();
  inline void clear_has_channelnumber();
  inline void set_has_deletepriority();
  inline void clear_has_deletepriority();
  inline void set_has_notrecordreason();
  inline void clear_has_notrecordreason();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_recordingtype();
  inline void clear_has_recordingtype();
  inline void set_has_failurereason();
  inline void clear_has_failurereason();
  inline void set_has_schedulerrecordingoptions();
  inline void clear_has_schedulerrecordingoptions();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_watched();
  inline void clear_has_watched();
  inline void set_has_payperview();
  inline void clear_has_payperview();
  inline void set_has_entitlementid();
  inline void clear_has_entitlementid();
  inline void set_has_undeletestatus();
  inline void clear_has_undeletestatus();
  inline void set_has_timedeleted();
  inline void clear_has_timedeleted();
  inline void set_has_parentdeviceguid();
  inline void clear_has_parentdeviceguid();
  inline void set_has_listingguid();
  inline void clear_has_listingguid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* accountguid_;
  ::std::string* deviceguid_;
  ::std::string* sourceguid_;
  ::std::string* entityid_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  ::std::string* stationguid_;
  ::google::protobuf::int32 channelnumber_;
  int deletepriority_;
  int notrecordreason_;
  int status_;
  ::std::string* failurereason_;
  ::scheduler::RecordingOptions* schedulerrecordingoptions_;
  ::google::protobuf::RepeatedPtrField< ::scheduler::RecordingSegment > segments_;
  ::std::string* title_;
  int recordingtype_;
  bool watched_;
  bool payperview_;
  ::std::string* description_;
  ::google::protobuf::int32 entitlementid_;
  int undeletestatus_;
  ::google::protobuf::int64 timedeleted_;
  ::google::protobuf::RepeatedPtrField< ::scheduler::ListingData > listingdatalist_;
  ::std::string* parentdeviceguid_;
  ::std::string* listingguid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];
  
  friend void  protobuf_AddDesc_Recording_2eproto();
  friend void protobuf_AssignDesc_Recording_2eproto();
  friend void protobuf_ShutdownFile_Recording_2eproto();
  
  void InitAsDefaultInstance();
  static Recording* default_instance_;
};
// ===================================================================


// ===================================================================

// Recording

// optional string id = 1;
inline bool Recording::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Recording::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Recording::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Recording::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Recording::id() const {
  return *id_;
}
inline void Recording::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Recording::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Recording::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Recording::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string accountGuid = 2;
inline bool Recording::has_accountguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Recording::set_has_accountguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Recording::clear_has_accountguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Recording::clear_accountguid() {
  if (accountguid_ != &::google::protobuf::internal::kEmptyString) {
    accountguid_->clear();
  }
  clear_has_accountguid();
}
inline const ::std::string& Recording::accountguid() const {
  return *accountguid_;
}
inline void Recording::set_accountguid(const ::std::string& value) {
  set_has_accountguid();
  if (accountguid_ == &::google::protobuf::internal::kEmptyString) {
    accountguid_ = new ::std::string;
  }
  accountguid_->assign(value);
}
inline void Recording::set_accountguid(const char* value) {
  set_has_accountguid();
  if (accountguid_ == &::google::protobuf::internal::kEmptyString) {
    accountguid_ = new ::std::string;
  }
  accountguid_->assign(value);
}
inline void Recording::set_accountguid(const char* value, size_t size) {
  set_has_accountguid();
  if (accountguid_ == &::google::protobuf::internal::kEmptyString) {
    accountguid_ = new ::std::string;
  }
  accountguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_accountguid() {
  set_has_accountguid();
  if (accountguid_ == &::google::protobuf::internal::kEmptyString) {
    accountguid_ = new ::std::string;
  }
  return accountguid_;
}
inline ::std::string* Recording::release_accountguid() {
  clear_has_accountguid();
  if (accountguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountguid_;
    accountguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceGuid = 3;
inline bool Recording::has_deviceguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Recording::set_has_deviceguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Recording::clear_has_deviceguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Recording::clear_deviceguid() {
  if (deviceguid_ != &::google::protobuf::internal::kEmptyString) {
    deviceguid_->clear();
  }
  clear_has_deviceguid();
}
inline const ::std::string& Recording::deviceguid() const {
  return *deviceguid_;
}
inline void Recording::set_deviceguid(const ::std::string& value) {
  set_has_deviceguid();
  if (deviceguid_ == &::google::protobuf::internal::kEmptyString) {
    deviceguid_ = new ::std::string;
  }
  deviceguid_->assign(value);
}
inline void Recording::set_deviceguid(const char* value) {
  set_has_deviceguid();
  if (deviceguid_ == &::google::protobuf::internal::kEmptyString) {
    deviceguid_ = new ::std::string;
  }
  deviceguid_->assign(value);
}
inline void Recording::set_deviceguid(const char* value, size_t size) {
  set_has_deviceguid();
  if (deviceguid_ == &::google::protobuf::internal::kEmptyString) {
    deviceguid_ = new ::std::string;
  }
  deviceguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_deviceguid() {
  set_has_deviceguid();
  if (deviceguid_ == &::google::protobuf::internal::kEmptyString) {
    deviceguid_ = new ::std::string;
  }
  return deviceguid_;
}
inline ::std::string* Recording::release_deviceguid() {
  clear_has_deviceguid();
  if (deviceguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceguid_;
    deviceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sourceGuid = 4;
inline bool Recording::has_sourceguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Recording::set_has_sourceguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Recording::clear_has_sourceguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Recording::clear_sourceguid() {
  if (sourceguid_ != &::google::protobuf::internal::kEmptyString) {
    sourceguid_->clear();
  }
  clear_has_sourceguid();
}
inline const ::std::string& Recording::sourceguid() const {
  return *sourceguid_;
}
inline void Recording::set_sourceguid(const ::std::string& value) {
  set_has_sourceguid();
  if (sourceguid_ == &::google::protobuf::internal::kEmptyString) {
    sourceguid_ = new ::std::string;
  }
  sourceguid_->assign(value);
}
inline void Recording::set_sourceguid(const char* value) {
  set_has_sourceguid();
  if (sourceguid_ == &::google::protobuf::internal::kEmptyString) {
    sourceguid_ = new ::std::string;
  }
  sourceguid_->assign(value);
}
inline void Recording::set_sourceguid(const char* value, size_t size) {
  set_has_sourceguid();
  if (sourceguid_ == &::google::protobuf::internal::kEmptyString) {
    sourceguid_ = new ::std::string;
  }
  sourceguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_sourceguid() {
  set_has_sourceguid();
  if (sourceguid_ == &::google::protobuf::internal::kEmptyString) {
    sourceguid_ = new ::std::string;
  }
  return sourceguid_;
}
inline ::std::string* Recording::release_sourceguid() {
  clear_has_sourceguid();
  if (sourceguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourceguid_;
    sourceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string entityId = 5;
inline bool Recording::has_entityid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Recording::set_has_entityid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Recording::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Recording::clear_entityid() {
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    entityid_->clear();
  }
  clear_has_entityid();
}
inline const ::std::string& Recording::entityid() const {
  return *entityid_;
}
inline void Recording::set_entityid(const ::std::string& value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void Recording::set_entityid(const char* value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
}
inline void Recording::set_entityid(const char* value, size_t size) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_entityid() {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    entityid_ = new ::std::string;
  }
  return entityid_;
}
inline ::std::string* Recording::release_entityid() {
  clear_has_entityid();
  if (entityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entityid_;
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 startTime = 6;
inline bool Recording::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Recording::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Recording::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Recording::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 Recording::starttime() const {
  return starttime_;
}
inline void Recording::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// required int64 endTime = 7;
inline bool Recording::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Recording::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Recording::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Recording::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 Recording::endtime() const {
  return endtime_;
}
inline void Recording::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional string stationGuid = 8;
inline bool Recording::has_stationguid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Recording::set_has_stationguid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Recording::clear_has_stationguid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Recording::clear_stationguid() {
  if (stationguid_ != &::google::protobuf::internal::kEmptyString) {
    stationguid_->clear();
  }
  clear_has_stationguid();
}
inline const ::std::string& Recording::stationguid() const {
  return *stationguid_;
}
inline void Recording::set_stationguid(const ::std::string& value) {
  set_has_stationguid();
  if (stationguid_ == &::google::protobuf::internal::kEmptyString) {
    stationguid_ = new ::std::string;
  }
  stationguid_->assign(value);
}
inline void Recording::set_stationguid(const char* value) {
  set_has_stationguid();
  if (stationguid_ == &::google::protobuf::internal::kEmptyString) {
    stationguid_ = new ::std::string;
  }
  stationguid_->assign(value);
}
inline void Recording::set_stationguid(const char* value, size_t size) {
  set_has_stationguid();
  if (stationguid_ == &::google::protobuf::internal::kEmptyString) {
    stationguid_ = new ::std::string;
  }
  stationguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_stationguid() {
  set_has_stationguid();
  if (stationguid_ == &::google::protobuf::internal::kEmptyString) {
    stationguid_ = new ::std::string;
  }
  return stationguid_;
}
inline ::std::string* Recording::release_stationguid() {
  clear_has_stationguid();
  if (stationguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stationguid_;
    stationguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 channelNumber = 9;
inline bool Recording::has_channelnumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Recording::set_has_channelnumber() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Recording::clear_has_channelnumber() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Recording::clear_channelnumber() {
  channelnumber_ = 0;
  clear_has_channelnumber();
}
inline ::google::protobuf::int32 Recording::channelnumber() const {
  return channelnumber_;
}
inline void Recording::set_channelnumber(::google::protobuf::int32 value) {
  set_has_channelnumber();
  channelnumber_ = value;
}

// optional .scheduler.DeletePriority deletePriority = 10;
inline bool Recording::has_deletepriority() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Recording::set_has_deletepriority() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Recording::clear_has_deletepriority() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Recording::clear_deletepriority() {
  deletepriority_ = 0;
  clear_has_deletepriority();
}
inline scheduler::DeletePriority Recording::deletepriority() const {
  return static_cast< scheduler::DeletePriority >(deletepriority_);
}
inline void Recording::set_deletepriority(scheduler::DeletePriority value) {
  GOOGLE_DCHECK(scheduler::DeletePriority_IsValid(value));
  set_has_deletepriority();
  deletepriority_ = value;
}

// optional .scheduler.NotRecordReason notRecordReason = 11;
inline bool Recording::has_notrecordreason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Recording::set_has_notrecordreason() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Recording::clear_has_notrecordreason() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Recording::clear_notrecordreason() {
  notrecordreason_ = 0;
  clear_has_notrecordreason();
}
inline scheduler::NotRecordReason Recording::notrecordreason() const {
  return static_cast< scheduler::NotRecordReason >(notrecordreason_);
}
inline void Recording::set_notrecordreason(scheduler::NotRecordReason value) {
  GOOGLE_DCHECK(scheduler::NotRecordReason_IsValid(value));
  set_has_notrecordreason();
  notrecordreason_ = value;
}

// optional .scheduler.RecordingStatus status = 12;
inline bool Recording::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Recording::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Recording::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Recording::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline scheduler::RecordingStatus Recording::status() const {
  return static_cast< scheduler::RecordingStatus >(status_);
}
inline void Recording::set_status(scheduler::RecordingStatus value) {
  GOOGLE_DCHECK(scheduler::RecordingStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .scheduler.RecordingType recordingType = 13;
inline bool Recording::has_recordingtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Recording::set_has_recordingtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Recording::clear_has_recordingtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Recording::clear_recordingtype() {
  recordingtype_ = 0;
  clear_has_recordingtype();
}
inline scheduler::RecordingType Recording::recordingtype() const {
  return static_cast< scheduler::RecordingType >(recordingtype_);
}
inline void Recording::set_recordingtype(scheduler::RecordingType value) {
  GOOGLE_DCHECK(scheduler::RecordingType_IsValid(value));
  set_has_recordingtype();
  recordingtype_ = value;
}

// optional string failureReason = 14;
inline bool Recording::has_failurereason() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Recording::set_has_failurereason() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Recording::clear_has_failurereason() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Recording::clear_failurereason() {
  if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
    failurereason_->clear();
  }
  clear_has_failurereason();
}
inline const ::std::string& Recording::failurereason() const {
  return *failurereason_;
}
inline void Recording::set_failurereason(const ::std::string& value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::kEmptyString) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
}
inline void Recording::set_failurereason(const char* value) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::kEmptyString) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(value);
}
inline void Recording::set_failurereason(const char* value, size_t size) {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::kEmptyString) {
    failurereason_ = new ::std::string;
  }
  failurereason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_failurereason() {
  set_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::kEmptyString) {
    failurereason_ = new ::std::string;
  }
  return failurereason_;
}
inline ::std::string* Recording::release_failurereason() {
  clear_has_failurereason();
  if (failurereason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failurereason_;
    failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
inline bool Recording::has_schedulerrecordingoptions() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Recording::set_has_schedulerrecordingoptions() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Recording::clear_has_schedulerrecordingoptions() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Recording::clear_schedulerrecordingoptions() {
  if (schedulerrecordingoptions_ != NULL) schedulerrecordingoptions_->::scheduler::RecordingOptions::Clear();
  clear_has_schedulerrecordingoptions();
}
inline const ::scheduler::RecordingOptions& Recording::schedulerrecordingoptions() const {
  return schedulerrecordingoptions_ != NULL ? *schedulerrecordingoptions_ : *default_instance_->schedulerrecordingoptions_;
}
inline ::scheduler::RecordingOptions* Recording::mutable_schedulerrecordingoptions() {
  set_has_schedulerrecordingoptions();
  if (schedulerrecordingoptions_ == NULL) schedulerrecordingoptions_ = new ::scheduler::RecordingOptions;
  return schedulerrecordingoptions_;
}
inline ::scheduler::RecordingOptions* Recording::release_schedulerrecordingoptions() {
  clear_has_schedulerrecordingoptions();
  ::scheduler::RecordingOptions* temp = schedulerrecordingoptions_;
  schedulerrecordingoptions_ = NULL;
  return temp;
}

// repeated .scheduler.RecordingSegment segments = 16;
inline int Recording::segments_size() const {
  return segments_.size();
}
inline void Recording::clear_segments() {
  segments_.Clear();
}
inline const ::scheduler::RecordingSegment& Recording::segments(int index) const {
  return segments_.Get(index);
}
inline ::scheduler::RecordingSegment* Recording::mutable_segments(int index) {
  return segments_.Mutable(index);
}
inline ::scheduler::RecordingSegment* Recording::add_segments() {
  return segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scheduler::RecordingSegment >&
Recording::segments() const {
  return segments_;
}
inline ::google::protobuf::RepeatedPtrField< ::scheduler::RecordingSegment >*
Recording::mutable_segments() {
  return &segments_;
}

// optional string title = 17;
inline bool Recording::has_title() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Recording::set_has_title() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Recording::clear_has_title() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Recording::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Recording::title() const {
  return *title_;
}
inline void Recording::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Recording::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Recording::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Recording::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 18;
inline bool Recording::has_description() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Recording::set_has_description() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Recording::clear_has_description() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Recording::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Recording::description() const {
  return *description_;
}
inline void Recording::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Recording::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Recording::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Recording::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool watched = 19;
inline bool Recording::has_watched() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Recording::set_has_watched() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Recording::clear_has_watched() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Recording::clear_watched() {
  watched_ = false;
  clear_has_watched();
}
inline bool Recording::watched() const {
  return watched_;
}
inline void Recording::set_watched(bool value) {
  set_has_watched();
  watched_ = value;
}

// required bool payPerView = 20;
inline bool Recording::has_payperview() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Recording::set_has_payperview() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Recording::clear_has_payperview() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Recording::clear_payperview() {
  payperview_ = false;
  clear_has_payperview();
}
inline bool Recording::payperview() const {
  return payperview_;
}
inline void Recording::set_payperview(bool value) {
  set_has_payperview();
  payperview_ = value;
}

// required int32 entitlementId = 21;
inline bool Recording::has_entitlementid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Recording::set_has_entitlementid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Recording::clear_has_entitlementid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Recording::clear_entitlementid() {
  entitlementid_ = 0;
  clear_has_entitlementid();
}
inline ::google::protobuf::int32 Recording::entitlementid() const {
  return entitlementid_;
}
inline void Recording::set_entitlementid(::google::protobuf::int32 value) {
  set_has_entitlementid();
  entitlementid_ = value;
}

// optional .scheduler.RecordingStatus undeleteStatus = 22;
inline bool Recording::has_undeletestatus() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Recording::set_has_undeletestatus() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Recording::clear_has_undeletestatus() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Recording::clear_undeletestatus() {
  undeletestatus_ = 0;
  clear_has_undeletestatus();
}
inline scheduler::RecordingStatus Recording::undeletestatus() const {
  return static_cast< scheduler::RecordingStatus >(undeletestatus_);
}
inline void Recording::set_undeletestatus(scheduler::RecordingStatus value) {
  GOOGLE_DCHECK(scheduler::RecordingStatus_IsValid(value));
  set_has_undeletestatus();
  undeletestatus_ = value;
}

// required int64 timeDeleted = 23;
inline bool Recording::has_timedeleted() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Recording::set_has_timedeleted() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Recording::clear_has_timedeleted() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Recording::clear_timedeleted() {
  timedeleted_ = GOOGLE_LONGLONG(0);
  clear_has_timedeleted();
}
inline ::google::protobuf::int64 Recording::timedeleted() const {
  return timedeleted_;
}
inline void Recording::set_timedeleted(::google::protobuf::int64 value) {
  set_has_timedeleted();
  timedeleted_ = value;
}

// repeated .scheduler.ListingData listingDataList = 24;
inline int Recording::listingdatalist_size() const {
  return listingdatalist_.size();
}
inline void Recording::clear_listingdatalist() {
  listingdatalist_.Clear();
}
inline const ::scheduler::ListingData& Recording::listingdatalist(int index) const {
  return listingdatalist_.Get(index);
}
inline ::scheduler::ListingData* Recording::mutable_listingdatalist(int index) {
  return listingdatalist_.Mutable(index);
}
inline ::scheduler::ListingData* Recording::add_listingdatalist() {
  return listingdatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scheduler::ListingData >&
Recording::listingdatalist() const {
  return listingdatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::scheduler::ListingData >*
Recording::mutable_listingdatalist() {
  return &listingdatalist_;
}

// optional string parentDeviceGuid = 25;
inline bool Recording::has_parentdeviceguid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Recording::set_has_parentdeviceguid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Recording::clear_has_parentdeviceguid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Recording::clear_parentdeviceguid() {
  if (parentdeviceguid_ != &::google::protobuf::internal::kEmptyString) {
    parentdeviceguid_->clear();
  }
  clear_has_parentdeviceguid();
}
inline const ::std::string& Recording::parentdeviceguid() const {
  return *parentdeviceguid_;
}
inline void Recording::set_parentdeviceguid(const ::std::string& value) {
  set_has_parentdeviceguid();
  if (parentdeviceguid_ == &::google::protobuf::internal::kEmptyString) {
    parentdeviceguid_ = new ::std::string;
  }
  parentdeviceguid_->assign(value);
}
inline void Recording::set_parentdeviceguid(const char* value) {
  set_has_parentdeviceguid();
  if (parentdeviceguid_ == &::google::protobuf::internal::kEmptyString) {
    parentdeviceguid_ = new ::std::string;
  }
  parentdeviceguid_->assign(value);
}
inline void Recording::set_parentdeviceguid(const char* value, size_t size) {
  set_has_parentdeviceguid();
  if (parentdeviceguid_ == &::google::protobuf::internal::kEmptyString) {
    parentdeviceguid_ = new ::std::string;
  }
  parentdeviceguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_parentdeviceguid() {
  set_has_parentdeviceguid();
  if (parentdeviceguid_ == &::google::protobuf::internal::kEmptyString) {
    parentdeviceguid_ = new ::std::string;
  }
  return parentdeviceguid_;
}
inline ::std::string* Recording::release_parentdeviceguid() {
  clear_has_parentdeviceguid();
  if (parentdeviceguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentdeviceguid_;
    parentdeviceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string listingGuid = 26;
inline bool Recording::has_listingguid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Recording::set_has_listingguid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Recording::clear_has_listingguid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Recording::clear_listingguid() {
  if (listingguid_ != &::google::protobuf::internal::kEmptyString) {
    listingguid_->clear();
  }
  clear_has_listingguid();
}
inline const ::std::string& Recording::listingguid() const {
  return *listingguid_;
}
inline void Recording::set_listingguid(const ::std::string& value) {
  set_has_listingguid();
  if (listingguid_ == &::google::protobuf::internal::kEmptyString) {
    listingguid_ = new ::std::string;
  }
  listingguid_->assign(value);
}
inline void Recording::set_listingguid(const char* value) {
  set_has_listingguid();
  if (listingguid_ == &::google::protobuf::internal::kEmptyString) {
    listingguid_ = new ::std::string;
  }
  listingguid_->assign(value);
}
inline void Recording::set_listingguid(const char* value, size_t size) {
  set_has_listingguid();
  if (listingguid_ == &::google::protobuf::internal::kEmptyString) {
    listingguid_ = new ::std::string;
  }
  listingguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Recording::mutable_listingguid() {
  set_has_listingguid();
  if (listingguid_ == &::google::protobuf::internal::kEmptyString) {
    listingguid_ = new ::std::string;
  }
  return listingguid_;
}
inline ::std::string* Recording::release_listingguid() {
  clear_has_listingguid();
  if (listingguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = listingguid_;
    listingguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Recording_2eproto__INCLUDED
