// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MinimalRecording.proto

#ifndef PROTOBUF_MinimalRecording_2eproto__INCLUDED
#define PROTOBUF_MinimalRecording_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "NotRecordReason.pb.h"
#include "RecordingStatus.pb.h"
#include "RecordingType.pb.h"
#include "MinimalListingData.pb.h"
// @@protoc_insertion_point(includes)

namespace scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MinimalRecording_2eproto();
void protobuf_AssignDesc_MinimalRecording_2eproto();
void protobuf_ShutdownFile_MinimalRecording_2eproto();

class MinimalRecording;

// ===================================================================

class MinimalRecording : public ::google::protobuf::Message {
 public:
  MinimalRecording();
  virtual ~MinimalRecording();
  
  MinimalRecording(const MinimalRecording& from);
  
  inline MinimalRecording& operator=(const MinimalRecording& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MinimalRecording& default_instance();
  
  void Swap(MinimalRecording* other);
  
  // implements Message ----------------------------------------------
  
  MinimalRecording* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinimalRecording& from);
  void MergeFrom(const MinimalRecording& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional .scheduler.NotRecordReason notRecordReason = 2;
  inline bool has_notrecordreason() const;
  inline void clear_notrecordreason();
  static const int kNotRecordReasonFieldNumber = 2;
  inline scheduler::NotRecordReason notrecordreason() const;
  inline void set_notrecordreason(scheduler::NotRecordReason value);
  
  // optional .scheduler.RecordingStatus recordingStatus = 3;
  inline bool has_recordingstatus() const;
  inline void clear_recordingstatus();
  static const int kRecordingStatusFieldNumber = 3;
  inline scheduler::RecordingStatus recordingstatus() const;
  inline void set_recordingstatus(scheduler::RecordingStatus value);
  
  // optional .scheduler.RecordingType recordingType = 4;
  inline bool has_recordingtype() const;
  inline void clear_recordingtype();
  static const int kRecordingTypeFieldNumber = 4;
  inline scheduler::RecordingType recordingtype() const;
  inline void set_recordingtype(scheduler::RecordingType value);
  
  // required int64 start = 5;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 5;
  inline ::google::protobuf::int64 start() const;
  inline void set_start(::google::protobuf::int64 value);
  
  // required int64 end = 6;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 6;
  inline ::google::protobuf::int64 end() const;
  inline void set_end(::google::protobuf::int64 value);
  
  // optional .scheduler.MinimalListingData listingData = 7;
  inline bool has_listingdata() const;
  inline void clear_listingdata();
  static const int kListingDataFieldNumber = 7;
  inline const ::scheduler::MinimalListingData& listingdata() const;
  inline ::scheduler::MinimalListingData* mutable_listingdata();
  inline ::scheduler::MinimalListingData* release_listingdata();
  
  // required bool watched = 8;
  inline bool has_watched() const;
  inline void clear_watched();
  static const int kWatchedFieldNumber = 8;
  inline bool watched() const;
  inline void set_watched(bool value);
  
  // required int64 sourceId = 9;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 9;
  inline ::google::protobuf::int64 sourceid() const;
  inline void set_sourceid(::google::protobuf::int64 value);
  
  // optional string deviceId = 10;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 10;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  
  // @@protoc_insertion_point(class_scope:scheduler.MinimalRecording)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_notrecordreason();
  inline void clear_has_notrecordreason();
  inline void set_has_recordingstatus();
  inline void clear_has_recordingstatus();
  inline void set_has_recordingtype();
  inline void clear_has_recordingtype();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_listingdata();
  inline void clear_has_listingdata();
  inline void set_has_watched();
  inline void clear_has_watched();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  int notrecordreason_;
  int recordingstatus_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  int recordingtype_;
  bool watched_;
  ::scheduler::MinimalListingData* listingdata_;
  ::google::protobuf::int64 sourceid_;
  ::std::string* deviceid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_MinimalRecording_2eproto();
  friend void protobuf_AssignDesc_MinimalRecording_2eproto();
  friend void protobuf_ShutdownFile_MinimalRecording_2eproto();
  
  void InitAsDefaultInstance();
  static MinimalRecording* default_instance_;
};
// ===================================================================


// ===================================================================

// MinimalRecording

// optional int64 id = 1;
inline bool MinimalRecording::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinimalRecording::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinimalRecording::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinimalRecording::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MinimalRecording::id() const {
  return id_;
}
inline void MinimalRecording::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .scheduler.NotRecordReason notRecordReason = 2;
inline bool MinimalRecording::has_notrecordreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MinimalRecording::set_has_notrecordreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MinimalRecording::clear_has_notrecordreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MinimalRecording::clear_notrecordreason() {
  notrecordreason_ = 0;
  clear_has_notrecordreason();
}
inline scheduler::NotRecordReason MinimalRecording::notrecordreason() const {
  return static_cast< scheduler::NotRecordReason >(notrecordreason_);
}
inline void MinimalRecording::set_notrecordreason(scheduler::NotRecordReason value) {
  GOOGLE_DCHECK(scheduler::NotRecordReason_IsValid(value));
  set_has_notrecordreason();
  notrecordreason_ = value;
}

// optional .scheduler.RecordingStatus recordingStatus = 3;
inline bool MinimalRecording::has_recordingstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MinimalRecording::set_has_recordingstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MinimalRecording::clear_has_recordingstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MinimalRecording::clear_recordingstatus() {
  recordingstatus_ = 0;
  clear_has_recordingstatus();
}
inline scheduler::RecordingStatus MinimalRecording::recordingstatus() const {
  return static_cast< scheduler::RecordingStatus >(recordingstatus_);
}
inline void MinimalRecording::set_recordingstatus(scheduler::RecordingStatus value) {
  GOOGLE_DCHECK(scheduler::RecordingStatus_IsValid(value));
  set_has_recordingstatus();
  recordingstatus_ = value;
}

// optional .scheduler.RecordingType recordingType = 4;
inline bool MinimalRecording::has_recordingtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MinimalRecording::set_has_recordingtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MinimalRecording::clear_has_recordingtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MinimalRecording::clear_recordingtype() {
  recordingtype_ = 0;
  clear_has_recordingtype();
}
inline scheduler::RecordingType MinimalRecording::recordingtype() const {
  return static_cast< scheduler::RecordingType >(recordingtype_);
}
inline void MinimalRecording::set_recordingtype(scheduler::RecordingType value) {
  GOOGLE_DCHECK(scheduler::RecordingType_IsValid(value));
  set_has_recordingtype();
  recordingtype_ = value;
}

// required int64 start = 5;
inline bool MinimalRecording::has_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MinimalRecording::set_has_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MinimalRecording::clear_has_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MinimalRecording::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 MinimalRecording::start() const {
  return start_;
}
inline void MinimalRecording::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
}

// required int64 end = 6;
inline bool MinimalRecording::has_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MinimalRecording::set_has_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MinimalRecording::clear_has_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MinimalRecording::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 MinimalRecording::end() const {
  return end_;
}
inline void MinimalRecording::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
}

// optional .scheduler.MinimalListingData listingData = 7;
inline bool MinimalRecording::has_listingdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MinimalRecording::set_has_listingdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MinimalRecording::clear_has_listingdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MinimalRecording::clear_listingdata() {
  if (listingdata_ != NULL) listingdata_->::scheduler::MinimalListingData::Clear();
  clear_has_listingdata();
}
inline const ::scheduler::MinimalListingData& MinimalRecording::listingdata() const {
  return listingdata_ != NULL ? *listingdata_ : *default_instance_->listingdata_;
}
inline ::scheduler::MinimalListingData* MinimalRecording::mutable_listingdata() {
  set_has_listingdata();
  if (listingdata_ == NULL) listingdata_ = new ::scheduler::MinimalListingData;
  return listingdata_;
}
inline ::scheduler::MinimalListingData* MinimalRecording::release_listingdata() {
  clear_has_listingdata();
  ::scheduler::MinimalListingData* temp = listingdata_;
  listingdata_ = NULL;
  return temp;
}

// required bool watched = 8;
inline bool MinimalRecording::has_watched() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MinimalRecording::set_has_watched() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MinimalRecording::clear_has_watched() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MinimalRecording::clear_watched() {
  watched_ = false;
  clear_has_watched();
}
inline bool MinimalRecording::watched() const {
  return watched_;
}
inline void MinimalRecording::set_watched(bool value) {
  set_has_watched();
  watched_ = value;
}

// required int64 sourceId = 9;
inline bool MinimalRecording::has_sourceid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MinimalRecording::set_has_sourceid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MinimalRecording::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MinimalRecording::clear_sourceid() {
  sourceid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceid();
}
inline ::google::protobuf::int64 MinimalRecording::sourceid() const {
  return sourceid_;
}
inline void MinimalRecording::set_sourceid(::google::protobuf::int64 value) {
  set_has_sourceid();
  sourceid_ = value;
}

// optional string deviceId = 10;
inline bool MinimalRecording::has_deviceid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MinimalRecording::set_has_deviceid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MinimalRecording::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MinimalRecording::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& MinimalRecording::deviceid() const {
  return *deviceid_;
}
inline void MinimalRecording::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void MinimalRecording::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void MinimalRecording::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MinimalRecording::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* MinimalRecording::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MinimalRecording_2eproto__INCLUDED
