// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordingOptions.proto

#ifndef PROTOBUF_RecordingOptions_2eproto__INCLUDED
#define PROTOBUF_RecordingOptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "DeletePriority.pb.h"
#include "FrequencyOptions.pb.h"
#include "ChannelOptions.pb.h"
#include "EpisodeOptions.pb.h"
// @@protoc_insertion_point(includes)

namespace scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecordingOptions_2eproto();
void protobuf_AssignDesc_RecordingOptions_2eproto();
void protobuf_ShutdownFile_RecordingOptions_2eproto();

class RecordingOptions;

// ===================================================================

class RecordingOptions : public ::google::protobuf::Message {
 public:
  RecordingOptions();
  virtual ~RecordingOptions();
  
  RecordingOptions(const RecordingOptions& from);
  
  inline RecordingOptions& operator=(const RecordingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordingOptions& default_instance();
  
  void Swap(RecordingOptions* other);
  
  // implements Message ----------------------------------------------
  
  RecordingOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordingOptions& from);
  void MergeFrom(const RecordingOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .scheduler.EpisodeOptions episodeOptions = 1;
  inline bool has_episodeoptions() const;
  inline void clear_episodeoptions();
  static const int kEpisodeOptionsFieldNumber = 1;
  inline scheduler::EpisodeOptions episodeoptions() const;
  inline void set_episodeoptions(scheduler::EpisodeOptions value);
  
  // optional .scheduler.FrequencyOptions frequencyOptions = 2;
  inline bool has_frequencyoptions() const;
  inline void clear_frequencyoptions();
  static const int kFrequencyOptionsFieldNumber = 2;
  inline scheduler::FrequencyOptions frequencyoptions() const;
  inline void set_frequencyoptions(scheduler::FrequencyOptions value);
  
  // optional .scheduler.ChannelOptions channelOptions = 3;
  inline bool has_channeloptions() const;
  inline void clear_channeloptions();
  static const int kChannelOptionsFieldNumber = 3;
  inline scheduler::ChannelOptions channeloptions() const;
  inline void set_channeloptions(scheduler::ChannelOptions value);
  
  // optional string channelId = 4;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 4;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  
  // required int32 episodesToKeep = 5;
  inline bool has_episodestokeep() const;
  inline void clear_episodestokeep();
  static const int kEpisodesToKeepFieldNumber = 5;
  inline ::google::protobuf::int32 episodestokeep() const;
  inline void set_episodestokeep(::google::protobuf::int32 value);
  
  // optional .scheduler.DeletePriority deletePriority = 6;
  inline bool has_deletepriority() const;
  inline void clear_deletepriority();
  static const int kDeletePriorityFieldNumber = 6;
  inline scheduler::DeletePriority deletepriority() const;
  inline void set_deletepriority(scheduler::DeletePriority value);
  
  // required int64 padBeforeSeconds = 7;
  inline bool has_padbeforeseconds() const;
  inline void clear_padbeforeseconds();
  static const int kPadBeforeSecondsFieldNumber = 7;
  inline ::google::protobuf::int64 padbeforeseconds() const;
  inline void set_padbeforeseconds(::google::protobuf::int64 value);
  
  // required int64 padAfterSeconds = 8;
  inline bool has_padafterseconds() const;
  inline void clear_padafterseconds();
  static const int kPadAfterSecondsFieldNumber = 8;
  inline ::google::protobuf::int64 padafterseconds() const;
  inline void set_padafterseconds(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:scheduler.RecordingOptions)
 private:
  inline void set_has_episodeoptions();
  inline void clear_has_episodeoptions();
  inline void set_has_frequencyoptions();
  inline void clear_has_frequencyoptions();
  inline void set_has_channeloptions();
  inline void clear_has_channeloptions();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_episodestokeep();
  inline void clear_has_episodestokeep();
  inline void set_has_deletepriority();
  inline void clear_has_deletepriority();
  inline void set_has_padbeforeseconds();
  inline void clear_has_padbeforeseconds();
  inline void set_has_padafterseconds();
  inline void clear_has_padafterseconds();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int episodeoptions_;
  int frequencyoptions_;
  ::std::string* channelid_;
  int channeloptions_;
  ::google::protobuf::int32 episodestokeep_;
  ::google::protobuf::int64 padbeforeseconds_;
  ::google::protobuf::int64 padafterseconds_;
  int deletepriority_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_RecordingOptions_2eproto();
  friend void protobuf_AssignDesc_RecordingOptions_2eproto();
  friend void protobuf_ShutdownFile_RecordingOptions_2eproto();
  
  void InitAsDefaultInstance();
  static RecordingOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// RecordingOptions

// optional .scheduler.EpisodeOptions episodeOptions = 1;
inline bool RecordingOptions::has_episodeoptions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordingOptions::set_has_episodeoptions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordingOptions::clear_has_episodeoptions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordingOptions::clear_episodeoptions() {
  episodeoptions_ = 0;
  clear_has_episodeoptions();
}
inline scheduler::EpisodeOptions RecordingOptions::episodeoptions() const {
  return static_cast< scheduler::EpisodeOptions >(episodeoptions_);
}
inline void RecordingOptions::set_episodeoptions(scheduler::EpisodeOptions value) {
  GOOGLE_DCHECK(scheduler::EpisodeOptions_IsValid(value));
  set_has_episodeoptions();
  episodeoptions_ = value;
}

// optional .scheduler.FrequencyOptions frequencyOptions = 2;
inline bool RecordingOptions::has_frequencyoptions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordingOptions::set_has_frequencyoptions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordingOptions::clear_has_frequencyoptions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordingOptions::clear_frequencyoptions() {
  frequencyoptions_ = 0;
  clear_has_frequencyoptions();
}
inline scheduler::FrequencyOptions RecordingOptions::frequencyoptions() const {
  return static_cast< scheduler::FrequencyOptions >(frequencyoptions_);
}
inline void RecordingOptions::set_frequencyoptions(scheduler::FrequencyOptions value) {
  GOOGLE_DCHECK(scheduler::FrequencyOptions_IsValid(value));
  set_has_frequencyoptions();
  frequencyoptions_ = value;
}

// optional .scheduler.ChannelOptions channelOptions = 3;
inline bool RecordingOptions::has_channeloptions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordingOptions::set_has_channeloptions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordingOptions::clear_has_channeloptions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordingOptions::clear_channeloptions() {
  channeloptions_ = 0;
  clear_has_channeloptions();
}
inline scheduler::ChannelOptions RecordingOptions::channeloptions() const {
  return static_cast< scheduler::ChannelOptions >(channeloptions_);
}
inline void RecordingOptions::set_channeloptions(scheduler::ChannelOptions value) {
  GOOGLE_DCHECK(scheduler::ChannelOptions_IsValid(value));
  set_has_channeloptions();
  channeloptions_ = value;
}

// optional string channelId = 4;
inline bool RecordingOptions::has_channelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordingOptions::set_has_channelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordingOptions::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordingOptions::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& RecordingOptions::channelid() const {
  return *channelid_;
}
inline void RecordingOptions::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RecordingOptions::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void RecordingOptions::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordingOptions::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* RecordingOptions::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 episodesToKeep = 5;
inline bool RecordingOptions::has_episodestokeep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordingOptions::set_has_episodestokeep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordingOptions::clear_has_episodestokeep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordingOptions::clear_episodestokeep() {
  episodestokeep_ = 0;
  clear_has_episodestokeep();
}
inline ::google::protobuf::int32 RecordingOptions::episodestokeep() const {
  return episodestokeep_;
}
inline void RecordingOptions::set_episodestokeep(::google::protobuf::int32 value) {
  set_has_episodestokeep();
  episodestokeep_ = value;
}

// optional .scheduler.DeletePriority deletePriority = 6;
inline bool RecordingOptions::has_deletepriority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordingOptions::set_has_deletepriority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordingOptions::clear_has_deletepriority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordingOptions::clear_deletepriority() {
  deletepriority_ = 0;
  clear_has_deletepriority();
}
inline scheduler::DeletePriority RecordingOptions::deletepriority() const {
  return static_cast< scheduler::DeletePriority >(deletepriority_);
}
inline void RecordingOptions::set_deletepriority(scheduler::DeletePriority value) {
  GOOGLE_DCHECK(scheduler::DeletePriority_IsValid(value));
  set_has_deletepriority();
  deletepriority_ = value;
}

// required int64 padBeforeSeconds = 7;
inline bool RecordingOptions::has_padbeforeseconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordingOptions::set_has_padbeforeseconds() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordingOptions::clear_has_padbeforeseconds() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordingOptions::clear_padbeforeseconds() {
  padbeforeseconds_ = GOOGLE_LONGLONG(0);
  clear_has_padbeforeseconds();
}
inline ::google::protobuf::int64 RecordingOptions::padbeforeseconds() const {
  return padbeforeseconds_;
}
inline void RecordingOptions::set_padbeforeseconds(::google::protobuf::int64 value) {
  set_has_padbeforeseconds();
  padbeforeseconds_ = value;
}

// required int64 padAfterSeconds = 8;
inline bool RecordingOptions::has_padafterseconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordingOptions::set_has_padafterseconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordingOptions::clear_has_padafterseconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordingOptions::clear_padafterseconds() {
  padafterseconds_ = GOOGLE_LONGLONG(0);
  clear_has_padafterseconds();
}
inline ::google::protobuf::int64 RecordingOptions::padafterseconds() const {
  return padafterseconds_;
}
inline void RecordingOptions::set_padafterseconds(::google::protobuf::int64 value) {
  set_has_padafterseconds();
  padafterseconds_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecordingOptions_2eproto__INCLUDED
