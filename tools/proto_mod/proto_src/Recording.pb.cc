// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Recording.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

namespace {

const ::google::protobuf::Descriptor* Recording_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recording_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Recording_2eproto() {
  protobuf_AddDesc_Recording_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Recording.proto");
  GOOGLE_CHECK(file != NULL);
  Recording_descriptor_ = file->message_type(0);
  static const int Recording_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, accountguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, deviceguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, sourceguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, stationguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, channelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, deletepriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, notrecordreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, recordingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, failurereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, schedulerrecordingoptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, watched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, payperview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, entitlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, undeletestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, timedeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, listingdatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, parentdeviceguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, listingguid_),
  };
  Recording_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Recording_descriptor_,
      Recording::default_instance_,
      Recording_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recording, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Recording));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Recording_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Recording_descriptor_, &Recording::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Recording_2eproto() {
  delete Recording::default_instance_;
  delete Recording_reflection_;
}

void protobuf_AddDesc_Recording_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_NotRecordReason_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingStatus_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingType_2eproto();
  ::scheduler::protobuf_AddDesc_DeletePriority_2eproto();
  ::scheduler::protobuf_AddDesc_ListingData_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingOptions_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingSegment_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Recording.proto\022\tscheduler\032\025NotRecordR"
    "eason.proto\032\025RecordingStatus.proto\032\023Reco"
    "rdingType.proto\032\024DeletePriority.proto\032\021L"
    "istingData.proto\032\026RecordingOptions.proto"
    "\032\026RecordingSegment.proto\"\212\006\n\tRecording\022\n"
    "\n\002id\030\001 \001(\t\022\023\n\013accountGuid\030\002 \001(\t\022\022\n\ndevic"
    "eGuid\030\003 \001(\t\022\022\n\nsourceGuid\030\004 \001(\t\022\020\n\010entit"
    "yId\030\005 \001(\t\022\021\n\tstartTime\030\006 \002(\003\022\017\n\007endTime\030"
    "\007 \002(\003\022\023\n\013stationGuid\030\010 \001(\t\022\025\n\rchannelNum"
    "ber\030\t \002(\005\0221\n\016deletePriority\030\n \001(\0162\031.sche"
    "duler.DeletePriority\0223\n\017notRecordReason\030"
    "\013 \001(\0162\032.scheduler.NotRecordReason\022*\n\006sta"
    "tus\030\014 \001(\0162\032.scheduler.RecordingStatus\022/\n"
    "\rrecordingType\030\r \001(\0162\030.scheduler.Recordi"
    "ngType\022\025\n\rfailureReason\030\016 \001(\t\022>\n\031schedul"
    "erRecordingOptions\030\017 \001(\0132\033.scheduler.Rec"
    "ordingOptions\022-\n\010segments\030\020 \003(\0132\033.schedu"
    "ler.RecordingSegment\022\r\n\005title\030\021 \001(\t\022\023\n\013d"
    "escription\030\022 \001(\t\022\017\n\007watched\030\023 \002(\010\022\022\n\npay"
    "PerView\030\024 \002(\010\022\025\n\rentitlementId\030\025 \002(\005\0222\n\016"
    "undeleteStatus\030\026 \001(\0162\032.scheduler.Recordi"
    "ngStatus\022\023\n\013timeDeleted\030\027 \002(\003\022/\n\017listing"
    "DataList\030\030 \003(\0132\026.scheduler.ListingData\022\030"
    "\n\020parentDeviceGuid\030\031 \001(\t\022\023\n\013listingGuid\030"
    "\032 \001(\tB=\n+com.comcast.data.protobuf.messa"
    "ge.schedulerB\016RecordingProto", 1028);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Recording.proto", &protobuf_RegisterTypes);
  Recording::default_instance_ = new Recording();
  Recording::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Recording_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Recording_2eproto {
  StaticDescriptorInitializer_Recording_2eproto() {
    protobuf_AddDesc_Recording_2eproto();
  }
} static_descriptor_initializer_Recording_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Recording::kIdFieldNumber;
const int Recording::kAccountGuidFieldNumber;
const int Recording::kDeviceGuidFieldNumber;
const int Recording::kSourceGuidFieldNumber;
const int Recording::kEntityIdFieldNumber;
const int Recording::kStartTimeFieldNumber;
const int Recording::kEndTimeFieldNumber;
const int Recording::kStationGuidFieldNumber;
const int Recording::kChannelNumberFieldNumber;
const int Recording::kDeletePriorityFieldNumber;
const int Recording::kNotRecordReasonFieldNumber;
const int Recording::kStatusFieldNumber;
const int Recording::kRecordingTypeFieldNumber;
const int Recording::kFailureReasonFieldNumber;
const int Recording::kSchedulerRecordingOptionsFieldNumber;
const int Recording::kSegmentsFieldNumber;
const int Recording::kTitleFieldNumber;
const int Recording::kDescriptionFieldNumber;
const int Recording::kWatchedFieldNumber;
const int Recording::kPayPerViewFieldNumber;
const int Recording::kEntitlementIdFieldNumber;
const int Recording::kUndeleteStatusFieldNumber;
const int Recording::kTimeDeletedFieldNumber;
const int Recording::kListingDataListFieldNumber;
const int Recording::kParentDeviceGuidFieldNumber;
const int Recording::kListingGuidFieldNumber;
#endif  // !_MSC_VER

Recording::Recording()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Recording::InitAsDefaultInstance() {
  schedulerrecordingoptions_ = const_cast< ::scheduler::RecordingOptions*>(&::scheduler::RecordingOptions::default_instance());
}

Recording::Recording(const Recording& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Recording::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  stationguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelnumber_ = 0;
  deletepriority_ = 0;
  notrecordreason_ = 0;
  status_ = 0;
  recordingtype_ = 0;
  failurereason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schedulerrecordingoptions_ = NULL;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  watched_ = false;
  payperview_ = false;
  entitlementid_ = 0;
  undeletestatus_ = 0;
  timedeleted_ = GOOGLE_LONGLONG(0);
  parentdeviceguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listingguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Recording::~Recording() {
  SharedDtor();
}

void Recording::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (accountguid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountguid_;
  }
  if (deviceguid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceguid_;
  }
  if (sourceguid_ != &::google::protobuf::internal::kEmptyString) {
    delete sourceguid_;
  }
  if (entityid_ != &::google::protobuf::internal::kEmptyString) {
    delete entityid_;
  }
  if (stationguid_ != &::google::protobuf::internal::kEmptyString) {
    delete stationguid_;
  }
  if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
    delete failurereason_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (parentdeviceguid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentdeviceguid_;
  }
  if (listingguid_ != &::google::protobuf::internal::kEmptyString) {
    delete listingguid_;
  }
  if (this != default_instance_) {
    delete schedulerrecordingoptions_;
  }
}

void Recording::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recording::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recording_descriptor_;
}

const Recording& Recording::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Recording_2eproto();  return *default_instance_;
}

Recording* Recording::default_instance_ = NULL;

Recording* Recording::New() const {
  return new Recording;
}

void Recording::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_accountguid()) {
      if (accountguid_ != &::google::protobuf::internal::kEmptyString) {
        accountguid_->clear();
      }
    }
    if (has_deviceguid()) {
      if (deviceguid_ != &::google::protobuf::internal::kEmptyString) {
        deviceguid_->clear();
      }
    }
    if (has_sourceguid()) {
      if (sourceguid_ != &::google::protobuf::internal::kEmptyString) {
        sourceguid_->clear();
      }
    }
    if (has_entityid()) {
      if (entityid_ != &::google::protobuf::internal::kEmptyString) {
        entityid_->clear();
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    if (has_stationguid()) {
      if (stationguid_ != &::google::protobuf::internal::kEmptyString) {
        stationguid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channelnumber_ = 0;
    deletepriority_ = 0;
    notrecordreason_ = 0;
    status_ = 0;
    recordingtype_ = 0;
    if (has_failurereason()) {
      if (failurereason_ != &::google::protobuf::internal::kEmptyString) {
        failurereason_->clear();
      }
    }
    if (has_schedulerrecordingoptions()) {
      if (schedulerrecordingoptions_ != NULL) schedulerrecordingoptions_->::scheduler::RecordingOptions::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    watched_ = false;
    payperview_ = false;
    entitlementid_ = 0;
    undeletestatus_ = 0;
    timedeleted_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_parentdeviceguid()) {
      if (parentdeviceguid_ != &::google::protobuf::internal::kEmptyString) {
        parentdeviceguid_->clear();
      }
    }
    if (has_listingguid()) {
      if (listingguid_ != &::google::protobuf::internal::kEmptyString) {
        listingguid_->clear();
      }
    }
  }
  segments_.Clear();
  listingdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Recording::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountGuid;
        break;
      }
      
      // optional string accountGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountguid().data(), this->accountguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceGuid;
        break;
      }
      
      // optional string deviceGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceguid().data(), this->deviceguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sourceGuid;
        break;
      }
      
      // optional string sourceGuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourceguid().data(), this->sourceguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entityId;
        break;
      }
      
      // optional string entityId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entityid().data(), this->entityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }
      
      // required int64 startTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endTime;
        break;
      }
      
      // required int64 endTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stationGuid;
        break;
      }
      
      // optional string stationGuid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stationguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stationguid().data(), this->stationguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channelNumber;
        break;
      }
      
      // required int32 channelNumber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelnumber_)));
          set_has_channelnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_deletePriority;
        break;
      }
      
      // optional .scheduler.DeletePriority deletePriority = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletePriority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::DeletePriority_IsValid(value)) {
            set_deletepriority(static_cast< scheduler::DeletePriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_notRecordReason;
        break;
      }
      
      // optional .scheduler.NotRecordReason notRecordReason = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notRecordReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::NotRecordReason_IsValid(value)) {
            set_notrecordreason(static_cast< scheduler::NotRecordReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }
      
      // optional .scheduler.RecordingStatus status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::RecordingStatus_IsValid(value)) {
            set_status(static_cast< scheduler::RecordingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_recordingType;
        break;
      }
      
      // optional .scheduler.RecordingType recordingType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordingType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::RecordingType_IsValid(value)) {
            set_recordingtype(static_cast< scheduler::RecordingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_failureReason;
        break;
      }
      
      // optional string failureReason = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failureReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failurereason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failurereason().data(), this->failurereason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_schedulerRecordingOptions;
        break;
      }
      
      // optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schedulerRecordingOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedulerrecordingoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_segments;
        break;
      }
      
      // repeated .scheduler.RecordingSegment segments = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_segments;
        if (input->ExpectTag(138)) goto parse_title;
        break;
      }
      
      // optional string title = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_description;
        break;
      }
      
      // optional string description = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_watched;
        break;
      }
      
      // required bool watched = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watched:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watched_)));
          set_has_watched();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_payPerView;
        break;
      }
      
      // required bool payPerView = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payPerView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payperview_)));
          set_has_payperview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_entitlementId;
        break;
      }
      
      // required int32 entitlementId = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entitlementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entitlementid_)));
          set_has_entitlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_undeleteStatus;
        break;
      }
      
      // optional .scheduler.RecordingStatus undeleteStatus = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undeleteStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::RecordingStatus_IsValid(value)) {
            set_undeletestatus(static_cast< scheduler::RecordingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_timeDeleted;
        break;
      }
      
      // required int64 timeDeleted = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timedeleted_)));
          set_has_timedeleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_listingDataList;
        break;
      }
      
      // repeated .scheduler.ListingData listingDataList = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listingDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listingdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_listingDataList;
        if (input->ExpectTag(202)) goto parse_parentDeviceGuid;
        break;
      }
      
      // optional string parentDeviceGuid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentDeviceGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentdeviceguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentdeviceguid().data(), this->parentdeviceguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_listingGuid;
        break;
      }
      
      // optional string listingGuid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listingGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listingguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listingguid().data(), this->listingguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Recording::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional string accountGuid = 2;
  if (has_accountguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountguid().data(), this->accountguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountguid(), output);
  }
  
  // optional string deviceGuid = 3;
  if (has_deviceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceguid().data(), this->deviceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deviceguid(), output);
  }
  
  // optional string sourceGuid = 4;
  if (has_sourceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceguid().data(), this->sourceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sourceguid(), output);
  }
  
  // optional string entityId = 5;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->entityid(), output);
  }
  
  // required int64 startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starttime(), output);
  }
  
  // required int64 endTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->endtime(), output);
  }
  
  // optional string stationGuid = 8;
  if (has_stationguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stationguid().data(), this->stationguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->stationguid(), output);
  }
  
  // required int32 channelNumber = 9;
  if (has_channelnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channelnumber(), output);
  }
  
  // optional .scheduler.DeletePriority deletePriority = 10;
  if (has_deletepriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->deletepriority(), output);
  }
  
  // optional .scheduler.NotRecordReason notRecordReason = 11;
  if (has_notrecordreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->notrecordreason(), output);
  }
  
  // optional .scheduler.RecordingStatus status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }
  
  // optional .scheduler.RecordingType recordingType = 13;
  if (has_recordingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->recordingtype(), output);
  }
  
  // optional string failureReason = 14;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->failurereason(), output);
  }
  
  // optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
  if (has_schedulerrecordingoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->schedulerrecordingoptions(), output);
  }
  
  // repeated .scheduler.RecordingSegment segments = 16;
  for (int i = 0; i < this->segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->segments(i), output);
  }
  
  // optional string title = 17;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->title(), output);
  }
  
  // optional string description = 18;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->description(), output);
  }
  
  // required bool watched = 19;
  if (has_watched()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->watched(), output);
  }
  
  // required bool payPerView = 20;
  if (has_payperview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->payperview(), output);
  }
  
  // required int32 entitlementId = 21;
  if (has_entitlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->entitlementid(), output);
  }
  
  // optional .scheduler.RecordingStatus undeleteStatus = 22;
  if (has_undeletestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->undeletestatus(), output);
  }
  
  // required int64 timeDeleted = 23;
  if (has_timedeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->timedeleted(), output);
  }
  
  // repeated .scheduler.ListingData listingDataList = 24;
  for (int i = 0; i < this->listingdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->listingdatalist(i), output);
  }
  
  // optional string parentDeviceGuid = 25;
  if (has_parentdeviceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentdeviceguid().data(), this->parentdeviceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->parentdeviceguid(), output);
  }
  
  // optional string listingGuid = 26;
  if (has_listingguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listingguid().data(), this->listingguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->listingguid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Recording::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional string accountGuid = 2;
  if (has_accountguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountguid().data(), this->accountguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountguid(), target);
  }
  
  // optional string deviceGuid = 3;
  if (has_deviceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceguid().data(), this->deviceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceguid(), target);
  }
  
  // optional string sourceGuid = 4;
  if (has_sourceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceguid().data(), this->sourceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sourceguid(), target);
  }
  
  // optional string entityId = 5;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->entityid(), target);
  }
  
  // required int64 startTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starttime(), target);
  }
  
  // required int64 endTime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->endtime(), target);
  }
  
  // optional string stationGuid = 8;
  if (has_stationguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stationguid().data(), this->stationguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->stationguid(), target);
  }
  
  // required int32 channelNumber = 9;
  if (has_channelnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channelnumber(), target);
  }
  
  // optional .scheduler.DeletePriority deletePriority = 10;
  if (has_deletepriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->deletepriority(), target);
  }
  
  // optional .scheduler.NotRecordReason notRecordReason = 11;
  if (has_notrecordreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->notrecordreason(), target);
  }
  
  // optional .scheduler.RecordingStatus status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }
  
  // optional .scheduler.RecordingType recordingType = 13;
  if (has_recordingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->recordingtype(), target);
  }
  
  // optional string failureReason = 14;
  if (has_failurereason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failurereason().data(), this->failurereason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->failurereason(), target);
  }
  
  // optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
  if (has_schedulerrecordingoptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->schedulerrecordingoptions(), target);
  }
  
  // repeated .scheduler.RecordingSegment segments = 16;
  for (int i = 0; i < this->segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->segments(i), target);
  }
  
  // optional string title = 17;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->title(), target);
  }
  
  // optional string description = 18;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->description(), target);
  }
  
  // required bool watched = 19;
  if (has_watched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->watched(), target);
  }
  
  // required bool payPerView = 20;
  if (has_payperview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->payperview(), target);
  }
  
  // required int32 entitlementId = 21;
  if (has_entitlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->entitlementid(), target);
  }
  
  // optional .scheduler.RecordingStatus undeleteStatus = 22;
  if (has_undeletestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->undeletestatus(), target);
  }
  
  // required int64 timeDeleted = 23;
  if (has_timedeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->timedeleted(), target);
  }
  
  // repeated .scheduler.ListingData listingDataList = 24;
  for (int i = 0; i < this->listingdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->listingdatalist(i), target);
  }
  
  // optional string parentDeviceGuid = 25;
  if (has_parentdeviceguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentdeviceguid().data(), this->parentdeviceguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->parentdeviceguid(), target);
  }
  
  // optional string listingGuid = 26;
  if (has_listingguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listingguid().data(), this->listingguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->listingguid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Recording::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string accountGuid = 2;
    if (has_accountguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountguid());
    }
    
    // optional string deviceGuid = 3;
    if (has_deviceguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceguid());
    }
    
    // optional string sourceGuid = 4;
    if (has_sourceguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceguid());
    }
    
    // optional string entityId = 5;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entityid());
    }
    
    // required int64 startTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }
    
    // required int64 endTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }
    
    // optional string stationGuid = 8;
    if (has_stationguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stationguid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 channelNumber = 9;
    if (has_channelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelnumber());
    }
    
    // optional .scheduler.DeletePriority deletePriority = 10;
    if (has_deletepriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deletepriority());
    }
    
    // optional .scheduler.NotRecordReason notRecordReason = 11;
    if (has_notrecordreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notrecordreason());
    }
    
    // optional .scheduler.RecordingStatus status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional .scheduler.RecordingType recordingType = 13;
    if (has_recordingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordingtype());
    }
    
    // optional string failureReason = 14;
    if (has_failurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failurereason());
    }
    
    // optional .scheduler.RecordingOptions schedulerRecordingOptions = 15;
    if (has_schedulerrecordingoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedulerrecordingoptions());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string title = 17;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string description = 18;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required bool watched = 19;
    if (has_watched()) {
      total_size += 2 + 1;
    }
    
    // required bool payPerView = 20;
    if (has_payperview()) {
      total_size += 2 + 1;
    }
    
    // required int32 entitlementId = 21;
    if (has_entitlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entitlementid());
    }
    
    // optional .scheduler.RecordingStatus undeleteStatus = 22;
    if (has_undeletestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->undeletestatus());
    }
    
    // required int64 timeDeleted = 23;
    if (has_timedeleted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timedeleted());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string parentDeviceGuid = 25;
    if (has_parentdeviceguid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentdeviceguid());
    }
    
    // optional string listingGuid = 26;
    if (has_listingguid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listingguid());
    }
    
  }
  // repeated .scheduler.RecordingSegment segments = 16;
  total_size += 2 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }
  
  // repeated .scheduler.ListingData listingDataList = 24;
  total_size += 2 * this->listingdatalist_size();
  for (int i = 0; i < this->listingdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listingdatalist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recording::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Recording* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Recording*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Recording::MergeFrom(const Recording& from) {
  GOOGLE_CHECK_NE(&from, this);
  segments_.MergeFrom(from.segments_);
  listingdatalist_.MergeFrom(from.listingdatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accountguid()) {
      set_accountguid(from.accountguid());
    }
    if (from.has_deviceguid()) {
      set_deviceguid(from.deviceguid());
    }
    if (from.has_sourceguid()) {
      set_sourceguid(from.sourceguid());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_stationguid()) {
      set_stationguid(from.stationguid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channelnumber()) {
      set_channelnumber(from.channelnumber());
    }
    if (from.has_deletepriority()) {
      set_deletepriority(from.deletepriority());
    }
    if (from.has_notrecordreason()) {
      set_notrecordreason(from.notrecordreason());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_recordingtype()) {
      set_recordingtype(from.recordingtype());
    }
    if (from.has_failurereason()) {
      set_failurereason(from.failurereason());
    }
    if (from.has_schedulerrecordingoptions()) {
      mutable_schedulerrecordingoptions()->::scheduler::RecordingOptions::MergeFrom(from.schedulerrecordingoptions());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_watched()) {
      set_watched(from.watched());
    }
    if (from.has_payperview()) {
      set_payperview(from.payperview());
    }
    if (from.has_entitlementid()) {
      set_entitlementid(from.entitlementid());
    }
    if (from.has_undeletestatus()) {
      set_undeletestatus(from.undeletestatus());
    }
    if (from.has_timedeleted()) {
      set_timedeleted(from.timedeleted());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_parentdeviceguid()) {
      set_parentdeviceguid(from.parentdeviceguid());
    }
    if (from.has_listingguid()) {
      set_listingguid(from.listingguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Recording::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recording::CopyFrom(const Recording& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recording::IsInitialized() const {
  if ((_has_bits_[0] & 0x005c0160) != 0x005c0160) return false;
  
  if (has_schedulerrecordingoptions()) {
    if (!this->schedulerrecordingoptions().IsInitialized()) return false;
  }
  for (int i = 0; i < segments_size(); i++) {
    if (!this->segments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < listingdatalist_size(); i++) {
    if (!this->listingdatalist(i).IsInitialized()) return false;
  }
  return true;
}

void Recording::Swap(Recording* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(accountguid_, other->accountguid_);
    std::swap(deviceguid_, other->deviceguid_);
    std::swap(sourceguid_, other->sourceguid_);
    std::swap(entityid_, other->entityid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(stationguid_, other->stationguid_);
    std::swap(channelnumber_, other->channelnumber_);
    std::swap(deletepriority_, other->deletepriority_);
    std::swap(notrecordreason_, other->notrecordreason_);
    std::swap(status_, other->status_);
    std::swap(recordingtype_, other->recordingtype_);
    std::swap(failurereason_, other->failurereason_);
    std::swap(schedulerrecordingoptions_, other->schedulerrecordingoptions_);
    segments_.Swap(&other->segments_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(watched_, other->watched_);
    std::swap(payperview_, other->payperview_);
    std::swap(entitlementid_, other->entitlementid_);
    std::swap(undeletestatus_, other->undeletestatus_);
    std::swap(timedeleted_, other->timedeleted_);
    listingdatalist_.Swap(&other->listingdatalist_);
    std::swap(parentdeviceguid_, other->parentdeviceguid_);
    std::swap(listingguid_, other->listingguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Recording::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recording_descriptor_;
  metadata.reflection = Recording_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
