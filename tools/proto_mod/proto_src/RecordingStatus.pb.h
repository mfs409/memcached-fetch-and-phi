// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordingStatus.proto

#ifndef PROTOBUF_RecordingStatus_2eproto__INCLUDED
#define PROTOBUF_RecordingStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecordingStatus_2eproto();
void protobuf_AssignDesc_RecordingStatus_2eproto();
void protobuf_ShutdownFile_RecordingStatus_2eproto();


enum RecordingStatus {
  PendingNoConflict = 0,
  PendingWithConflict = 1,
  Stopped = 2,
  StartedIncomplete = 3,
  StartedInsufficientSpace = 4,
  StartedWithError = 5,
  Started = 6,
  Failed = 7,
  Incomplete = 8,
  Complete = 9,
  Deleted = 10,
  Erased = 11,
  UnknownR = 12,
  Missing = 13,
  Foreign = 14
};
bool RecordingStatus_IsValid(int value);
const RecordingStatus RecordingStatus_MIN = PendingNoConflict;
const RecordingStatus RecordingStatus_MAX = Foreign;
const int RecordingStatus_ARRAYSIZE = RecordingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordingStatus_descriptor();
inline const ::std::string& RecordingStatus_Name(RecordingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordingStatus_descriptor(), value);
}
inline bool RecordingStatus_Parse(
    const ::std::string& name, RecordingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordingStatus>(
    RecordingStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< scheduler::RecordingStatus>() {
  return scheduler::RecordingStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecordingStatus_2eproto__INCLUDED
