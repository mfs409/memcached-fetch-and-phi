// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MinimalRecording.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

namespace {

const ::google::protobuf::Descriptor* MinimalRecording_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MinimalRecording_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MinimalRecording_2eproto() {
  protobuf_AddDesc_MinimalRecording_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MinimalRecording.proto");
  GOOGLE_CHECK(file != NULL);
  MinimalRecording_descriptor_ = file->message_type(0);
  static const int MinimalRecording_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, notrecordreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, recordingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, recordingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, listingdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, watched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, deviceid_),
  };
  MinimalRecording_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MinimalRecording_descriptor_,
      MinimalRecording::default_instance_,
      MinimalRecording_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecording, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MinimalRecording));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MinimalRecording_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MinimalRecording_descriptor_, &MinimalRecording::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MinimalRecording_2eproto() {
  delete MinimalRecording::default_instance_;
  delete MinimalRecording_reflection_;
}

void protobuf_AddDesc_MinimalRecording_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_NotRecordReason_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingStatus_2eproto();
  ::scheduler::protobuf_AddDesc_RecordingType_2eproto();
  ::scheduler::protobuf_AddDesc_MinimalListingData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MinimalRecording.proto\022\tscheduler\032\025Not"
    "RecordReason.proto\032\025RecordingStatus.prot"
    "o\032\023RecordingType.proto\032\030MinimalListingDa"
    "ta.proto\"\276\002\n\020MinimalRecording\022\n\n\002id\030\001 \001("
    "\003\0223\n\017notRecordReason\030\002 \001(\0162\032.scheduler.N"
    "otRecordReason\0223\n\017recordingStatus\030\003 \001(\0162"
    "\032.scheduler.RecordingStatus\022/\n\rrecording"
    "Type\030\004 \001(\0162\030.scheduler.RecordingType\022\r\n\005"
    "start\030\005 \002(\003\022\013\n\003end\030\006 \002(\003\0222\n\013listingData\030"
    "\007 \001(\0132\035.scheduler.MinimalListingData\022\017\n\007"
    "watched\030\010 \002(\010\022\020\n\010sourceId\030\t \002(\003\022\020\n\010devic"
    "eId\030\n \001(\tBD\n+com.comcast.data.protobuf.m"
    "essage.schedulerB\025MinimalRecordingProto", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MinimalRecording.proto", &protobuf_RegisterTypes);
  MinimalRecording::default_instance_ = new MinimalRecording();
  MinimalRecording::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MinimalRecording_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MinimalRecording_2eproto {
  StaticDescriptorInitializer_MinimalRecording_2eproto() {
    protobuf_AddDesc_MinimalRecording_2eproto();
  }
} static_descriptor_initializer_MinimalRecording_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MinimalRecording::kIdFieldNumber;
const int MinimalRecording::kNotRecordReasonFieldNumber;
const int MinimalRecording::kRecordingStatusFieldNumber;
const int MinimalRecording::kRecordingTypeFieldNumber;
const int MinimalRecording::kStartFieldNumber;
const int MinimalRecording::kEndFieldNumber;
const int MinimalRecording::kListingDataFieldNumber;
const int MinimalRecording::kWatchedFieldNumber;
const int MinimalRecording::kSourceIdFieldNumber;
const int MinimalRecording::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

MinimalRecording::MinimalRecording()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MinimalRecording::InitAsDefaultInstance() {
  listingdata_ = const_cast< ::scheduler::MinimalListingData*>(&::scheduler::MinimalListingData::default_instance());
}

MinimalRecording::MinimalRecording(const MinimalRecording& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MinimalRecording::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  notrecordreason_ = 0;
  recordingstatus_ = 0;
  recordingtype_ = 0;
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  listingdata_ = NULL;
  watched_ = false;
  sourceid_ = GOOGLE_LONGLONG(0);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinimalRecording::~MinimalRecording() {
  SharedDtor();
}

void MinimalRecording::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
    delete listingdata_;
  }
}

void MinimalRecording::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinimalRecording::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MinimalRecording_descriptor_;
}

const MinimalRecording& MinimalRecording::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MinimalRecording_2eproto();  return *default_instance_;
}

MinimalRecording* MinimalRecording::default_instance_ = NULL;

MinimalRecording* MinimalRecording::New() const {
  return new MinimalRecording;
}

void MinimalRecording::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    notrecordreason_ = 0;
    recordingstatus_ = 0;
    recordingtype_ = 0;
    start_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
    if (has_listingdata()) {
      if (listingdata_ != NULL) listingdata_->::scheduler::MinimalListingData::Clear();
    }
    watched_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sourceid_ = GOOGLE_LONGLONG(0);
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MinimalRecording::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notRecordReason;
        break;
      }
      
      // optional .scheduler.NotRecordReason notRecordReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notRecordReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::NotRecordReason_IsValid(value)) {
            set_notrecordreason(static_cast< scheduler::NotRecordReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recordingStatus;
        break;
      }
      
      // optional .scheduler.RecordingStatus recordingStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordingStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::RecordingStatus_IsValid(value)) {
            set_recordingstatus(static_cast< scheduler::RecordingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recordingType;
        break;
      }
      
      // optional .scheduler.RecordingType recordingType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordingType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::RecordingType_IsValid(value)) {
            set_recordingtype(static_cast< scheduler::RecordingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }
      
      // required int64 start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }
      
      // required int64 end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_listingData;
        break;
      }
      
      // optional .scheduler.MinimalListingData listingData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listingData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_watched;
        break;
      }
      
      // required bool watched = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watched:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watched_)));
          set_has_watched();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sourceId;
        break;
      }
      
      // required int64 sourceId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_deviceId;
        break;
      }
      
      // optional string deviceId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinimalRecording::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional .scheduler.NotRecordReason notRecordReason = 2;
  if (has_notrecordreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->notrecordreason(), output);
  }
  
  // optional .scheduler.RecordingStatus recordingStatus = 3;
  if (has_recordingstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->recordingstatus(), output);
  }
  
  // optional .scheduler.RecordingType recordingType = 4;
  if (has_recordingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recordingtype(), output);
  }
  
  // required int64 start = 5;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start(), output);
  }
  
  // required int64 end = 6;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end(), output);
  }
  
  // optional .scheduler.MinimalListingData listingData = 7;
  if (has_listingdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->listingdata(), output);
  }
  
  // required bool watched = 8;
  if (has_watched()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->watched(), output);
  }
  
  // required int64 sourceId = 9;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sourceid(), output);
  }
  
  // optional string deviceId = 10;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->deviceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MinimalRecording::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional .scheduler.NotRecordReason notRecordReason = 2;
  if (has_notrecordreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->notrecordreason(), target);
  }
  
  // optional .scheduler.RecordingStatus recordingStatus = 3;
  if (has_recordingstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->recordingstatus(), target);
  }
  
  // optional .scheduler.RecordingType recordingType = 4;
  if (has_recordingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recordingtype(), target);
  }
  
  // required int64 start = 5;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start(), target);
  }
  
  // required int64 end = 6;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end(), target);
  }
  
  // optional .scheduler.MinimalListingData listingData = 7;
  if (has_listingdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->listingdata(), target);
  }
  
  // required bool watched = 8;
  if (has_watched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->watched(), target);
  }
  
  // required int64 sourceId = 9;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sourceid(), target);
  }
  
  // optional string deviceId = 10;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->deviceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MinimalRecording::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional .scheduler.NotRecordReason notRecordReason = 2;
    if (has_notrecordreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notrecordreason());
    }
    
    // optional .scheduler.RecordingStatus recordingStatus = 3;
    if (has_recordingstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordingstatus());
    }
    
    // optional .scheduler.RecordingType recordingType = 4;
    if (has_recordingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordingtype());
    }
    
    // required int64 start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }
    
    // required int64 end = 6;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }
    
    // optional .scheduler.MinimalListingData listingData = 7;
    if (has_listingdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listingdata());
    }
    
    // required bool watched = 8;
    if (has_watched()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 sourceId = 9;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceid());
    }
    
    // optional string deviceId = 10;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinimalRecording::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MinimalRecording* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MinimalRecording*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MinimalRecording::MergeFrom(const MinimalRecording& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_notrecordreason()) {
      set_notrecordreason(from.notrecordreason());
    }
    if (from.has_recordingstatus()) {
      set_recordingstatus(from.recordingstatus());
    }
    if (from.has_recordingtype()) {
      set_recordingtype(from.recordingtype());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_listingdata()) {
      mutable_listingdata()->::scheduler::MinimalListingData::MergeFrom(from.listingdata());
    }
    if (from.has_watched()) {
      set_watched(from.watched());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MinimalRecording::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinimalRecording::CopyFrom(const MinimalRecording& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalRecording::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001b0) != 0x000001b0) return false;
  
  if (has_listingdata()) {
    if (!this->listingdata().IsInitialized()) return false;
  }
  return true;
}

void MinimalRecording::Swap(MinimalRecording* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(notrecordreason_, other->notrecordreason_);
    std::swap(recordingstatus_, other->recordingstatus_);
    std::swap(recordingtype_, other->recordingtype_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(listingdata_, other->listingdata_);
    std::swap(watched_, other->watched_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MinimalRecording::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MinimalRecording_descriptor_;
  metadata.reflection = MinimalRecording_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
