// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordingSegment.proto

#ifndef PROTOBUF_RecordingSegment_2eproto__INCLUDED
#define PROTOBUF_RecordingSegment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecordingSegment_2eproto();
void protobuf_AssignDesc_RecordingSegment_2eproto();
void protobuf_ShutdownFile_RecordingSegment_2eproto();

class RecordingSegment;

// ===================================================================

class RecordingSegment : public ::google::protobuf::Message {
 public:
  RecordingSegment();
  virtual ~RecordingSegment();
  
  RecordingSegment(const RecordingSegment& from);
  
  inline RecordingSegment& operator=(const RecordingSegment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordingSegment& default_instance();
  
  void Swap(RecordingSegment* other);
  
  // implements Message ----------------------------------------------
  
  RecordingSegment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordingSegment& from);
  void MergeFrom(const RecordingSegment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 actualStart = 1;
  inline bool has_actualstart() const;
  inline void clear_actualstart();
  static const int kActualStartFieldNumber = 1;
  inline ::google::protobuf::int64 actualstart() const;
  inline void set_actualstart(::google::protobuf::int64 value);
  
  // required int64 actualEnd = 2;
  inline bool has_actualend() const;
  inline void clear_actualend();
  static const int kActualEndFieldNumber = 2;
  inline ::google::protobuf::int64 actualend() const;
  inline void set_actualend(::google::protobuf::int64 value);
  
  // required int32 segmentNumber = 3;
  inline bool has_segmentnumber() const;
  inline void clear_segmentnumber();
  static const int kSegmentNumberFieldNumber = 3;
  inline ::google::protobuf::int32 segmentnumber() const;
  inline void set_segmentnumber(::google::protobuf::int32 value);
  
  // optional string volume = 4;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 4;
  inline const ::std::string& volume() const;
  inline void set_volume(const ::std::string& value);
  inline void set_volume(const char* value);
  inline void set_volume(const char* value, size_t size);
  inline ::std::string* mutable_volume();
  inline ::std::string* release_volume();
  
  // optional string playBackLocator = 5;
  inline bool has_playbacklocator() const;
  inline void clear_playbacklocator();
  static const int kPlayBackLocatorFieldNumber = 5;
  inline const ::std::string& playbacklocator() const;
  inline void set_playbacklocator(const ::std::string& value);
  inline void set_playbacklocator(const char* value);
  inline void set_playbacklocator(const char* value, size_t size);
  inline ::std::string* mutable_playbacklocator();
  inline ::std::string* release_playbacklocator();
  
  // @@protoc_insertion_point(class_scope:scheduler.RecordingSegment)
 private:
  inline void set_has_actualstart();
  inline void clear_has_actualstart();
  inline void set_has_actualend();
  inline void clear_has_actualend();
  inline void set_has_segmentnumber();
  inline void clear_has_segmentnumber();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_playbacklocator();
  inline void clear_has_playbacklocator();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 actualstart_;
  ::google::protobuf::int64 actualend_;
  ::std::string* volume_;
  ::std::string* playbacklocator_;
  ::google::protobuf::int32 segmentnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RecordingSegment_2eproto();
  friend void protobuf_AssignDesc_RecordingSegment_2eproto();
  friend void protobuf_ShutdownFile_RecordingSegment_2eproto();
  
  void InitAsDefaultInstance();
  static RecordingSegment* default_instance_;
};
// ===================================================================


// ===================================================================

// RecordingSegment

// required int64 actualStart = 1;
inline bool RecordingSegment::has_actualstart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordingSegment::set_has_actualstart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordingSegment::clear_has_actualstart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordingSegment::clear_actualstart() {
  actualstart_ = GOOGLE_LONGLONG(0);
  clear_has_actualstart();
}
inline ::google::protobuf::int64 RecordingSegment::actualstart() const {
  return actualstart_;
}
inline void RecordingSegment::set_actualstart(::google::protobuf::int64 value) {
  set_has_actualstart();
  actualstart_ = value;
}

// required int64 actualEnd = 2;
inline bool RecordingSegment::has_actualend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordingSegment::set_has_actualend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordingSegment::clear_has_actualend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordingSegment::clear_actualend() {
  actualend_ = GOOGLE_LONGLONG(0);
  clear_has_actualend();
}
inline ::google::protobuf::int64 RecordingSegment::actualend() const {
  return actualend_;
}
inline void RecordingSegment::set_actualend(::google::protobuf::int64 value) {
  set_has_actualend();
  actualend_ = value;
}

// required int32 segmentNumber = 3;
inline bool RecordingSegment::has_segmentnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordingSegment::set_has_segmentnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordingSegment::clear_has_segmentnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordingSegment::clear_segmentnumber() {
  segmentnumber_ = 0;
  clear_has_segmentnumber();
}
inline ::google::protobuf::int32 RecordingSegment::segmentnumber() const {
  return segmentnumber_;
}
inline void RecordingSegment::set_segmentnumber(::google::protobuf::int32 value) {
  set_has_segmentnumber();
  segmentnumber_ = value;
}

// optional string volume = 4;
inline bool RecordingSegment::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordingSegment::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordingSegment::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordingSegment::clear_volume() {
  if (volume_ != &::google::protobuf::internal::kEmptyString) {
    volume_->clear();
  }
  clear_has_volume();
}
inline const ::std::string& RecordingSegment::volume() const {
  return *volume_;
}
inline void RecordingSegment::set_volume(const ::std::string& value) {
  set_has_volume();
  if (volume_ == &::google::protobuf::internal::kEmptyString) {
    volume_ = new ::std::string;
  }
  volume_->assign(value);
}
inline void RecordingSegment::set_volume(const char* value) {
  set_has_volume();
  if (volume_ == &::google::protobuf::internal::kEmptyString) {
    volume_ = new ::std::string;
  }
  volume_->assign(value);
}
inline void RecordingSegment::set_volume(const char* value, size_t size) {
  set_has_volume();
  if (volume_ == &::google::protobuf::internal::kEmptyString) {
    volume_ = new ::std::string;
  }
  volume_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordingSegment::mutable_volume() {
  set_has_volume();
  if (volume_ == &::google::protobuf::internal::kEmptyString) {
    volume_ = new ::std::string;
  }
  return volume_;
}
inline ::std::string* RecordingSegment::release_volume() {
  clear_has_volume();
  if (volume_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = volume_;
    volume_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playBackLocator = 5;
inline bool RecordingSegment::has_playbacklocator() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordingSegment::set_has_playbacklocator() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordingSegment::clear_has_playbacklocator() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordingSegment::clear_playbacklocator() {
  if (playbacklocator_ != &::google::protobuf::internal::kEmptyString) {
    playbacklocator_->clear();
  }
  clear_has_playbacklocator();
}
inline const ::std::string& RecordingSegment::playbacklocator() const {
  return *playbacklocator_;
}
inline void RecordingSegment::set_playbacklocator(const ::std::string& value) {
  set_has_playbacklocator();
  if (playbacklocator_ == &::google::protobuf::internal::kEmptyString) {
    playbacklocator_ = new ::std::string;
  }
  playbacklocator_->assign(value);
}
inline void RecordingSegment::set_playbacklocator(const char* value) {
  set_has_playbacklocator();
  if (playbacklocator_ == &::google::protobuf::internal::kEmptyString) {
    playbacklocator_ = new ::std::string;
  }
  playbacklocator_->assign(value);
}
inline void RecordingSegment::set_playbacklocator(const char* value, size_t size) {
  set_has_playbacklocator();
  if (playbacklocator_ == &::google::protobuf::internal::kEmptyString) {
    playbacklocator_ = new ::std::string;
  }
  playbacklocator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordingSegment::mutable_playbacklocator() {
  set_has_playbacklocator();
  if (playbacklocator_ == &::google::protobuf::internal::kEmptyString) {
    playbacklocator_ = new ::std::string;
  }
  return playbacklocator_;
}
inline ::std::string* RecordingSegment::release_playbacklocator() {
  clear_has_playbacklocator();
  if (playbacklocator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playbacklocator_;
    playbacklocator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecordingSegment_2eproto__INCLUDED
