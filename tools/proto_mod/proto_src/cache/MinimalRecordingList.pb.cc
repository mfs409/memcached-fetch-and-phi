// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cache/MinimalRecordingList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {
namespace cache {

namespace {

const ::google::protobuf::Descriptor* MinimalRecordingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MinimalRecordingList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cache_2fMinimalRecordingList_2eproto() {
  protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cache/MinimalRecordingList.proto");
  GOOGLE_CHECK(file != NULL);
  MinimalRecordingList_descriptor_ = file->message_type(0);
  static const int MinimalRecordingList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecordingList, recordings_),
  };
  MinimalRecordingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MinimalRecordingList_descriptor_,
      MinimalRecordingList::default_instance_,
      MinimalRecordingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecordingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalRecordingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MinimalRecordingList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cache_2fMinimalRecordingList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MinimalRecordingList_descriptor_, &MinimalRecordingList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cache_2fMinimalRecordingList_2eproto() {
  delete MinimalRecordingList::default_instance_;
  delete MinimalRecordingList_reflection_;
}

void protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_MinimalRecording_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n cache/MinimalRecordingList.proto\022\017sche"
    "duler.cache\032\026MinimalRecording.proto\"G\n\024M"
    "inimalRecordingList\022/\n\nrecordings\030\001 \003(\0132"
    "\033.scheduler.MinimalRecordingBN\n1com.comc"
    "ast.data.protobuf.message.scheduler.cach"
    "eB\031MinimalRecordingListProto", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cache/MinimalRecordingList.proto", &protobuf_RegisterTypes);
  MinimalRecordingList::default_instance_ = new MinimalRecordingList();
  MinimalRecordingList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cache_2fMinimalRecordingList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cache_2fMinimalRecordingList_2eproto {
  StaticDescriptorInitializer_cache_2fMinimalRecordingList_2eproto() {
    protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto();
  }
} static_descriptor_initializer_cache_2fMinimalRecordingList_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MinimalRecordingList::kRecordingsFieldNumber;
#endif  // !_MSC_VER

MinimalRecordingList::MinimalRecordingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MinimalRecordingList::InitAsDefaultInstance() {
}

MinimalRecordingList::MinimalRecordingList(const MinimalRecordingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MinimalRecordingList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinimalRecordingList::~MinimalRecordingList() {
  SharedDtor();
}

void MinimalRecordingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MinimalRecordingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinimalRecordingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MinimalRecordingList_descriptor_;
}

const MinimalRecordingList& MinimalRecordingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto();  return *default_instance_;
}

MinimalRecordingList* MinimalRecordingList::default_instance_ = NULL;

MinimalRecordingList* MinimalRecordingList::New() const {
  return new MinimalRecordingList;
}

void MinimalRecordingList::Clear() {
  recordings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MinimalRecordingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scheduler.MinimalRecording recordings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recordings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinimalRecordingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .scheduler.MinimalRecording recordings = 1;
  for (int i = 0; i < this->recordings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MinimalRecordingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .scheduler.MinimalRecording recordings = 1;
  for (int i = 0; i < this->recordings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MinimalRecordingList::ByteSize() const {
  int total_size = 0;
  
  // repeated .scheduler.MinimalRecording recordings = 1;
  total_size += 1 * this->recordings_size();
  for (int i = 0; i < this->recordings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinimalRecordingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MinimalRecordingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MinimalRecordingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MinimalRecordingList::MergeFrom(const MinimalRecordingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordings_.MergeFrom(from.recordings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MinimalRecordingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinimalRecordingList::CopyFrom(const MinimalRecordingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalRecordingList::IsInitialized() const {
  
  for (int i = 0; i < recordings_size(); i++) {
    if (!this->recordings(i).IsInitialized()) return false;
  }
  return true;
}

void MinimalRecordingList::Swap(MinimalRecordingList* other) {
  if (other != this) {
    recordings_.Swap(&other->recordings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MinimalRecordingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MinimalRecordingList_descriptor_;
  metadata.reflection = MinimalRecordingList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cache
}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
