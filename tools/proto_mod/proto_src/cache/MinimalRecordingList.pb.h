// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache/MinimalRecordingList.proto

#ifndef PROTOBUF_cache_2fMinimalRecordingList_2eproto__INCLUDED
#define PROTOBUF_cache_2fMinimalRecordingList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MinimalRecording.pb.h"
// @@protoc_insertion_point(includes)

namespace scheduler {
namespace cache {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto();
void protobuf_AssignDesc_cache_2fMinimalRecordingList_2eproto();
void protobuf_ShutdownFile_cache_2fMinimalRecordingList_2eproto();

class MinimalRecordingList;

// ===================================================================

class MinimalRecordingList : public ::google::protobuf::Message {
 public:
  MinimalRecordingList();
  virtual ~MinimalRecordingList();
  
  MinimalRecordingList(const MinimalRecordingList& from);
  
  inline MinimalRecordingList& operator=(const MinimalRecordingList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MinimalRecordingList& default_instance();
  
  void Swap(MinimalRecordingList* other);
  
  // implements Message ----------------------------------------------
  
  MinimalRecordingList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinimalRecordingList& from);
  void MergeFrom(const MinimalRecordingList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .scheduler.MinimalRecording recordings = 1;
  inline int recordings_size() const;
  inline void clear_recordings();
  static const int kRecordingsFieldNumber = 1;
  inline const ::scheduler::MinimalRecording& recordings(int index) const;
  inline ::scheduler::MinimalRecording* mutable_recordings(int index);
  inline ::scheduler::MinimalRecording* add_recordings();
  inline const ::google::protobuf::RepeatedPtrField< ::scheduler::MinimalRecording >&
      recordings() const;
  inline ::google::protobuf::RepeatedPtrField< ::scheduler::MinimalRecording >*
      mutable_recordings();
  
  // @@protoc_insertion_point(class_scope:scheduler.cache.MinimalRecordingList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::scheduler::MinimalRecording > recordings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cache_2fMinimalRecordingList_2eproto();
  friend void protobuf_AssignDesc_cache_2fMinimalRecordingList_2eproto();
  friend void protobuf_ShutdownFile_cache_2fMinimalRecordingList_2eproto();
  
  void InitAsDefaultInstance();
  static MinimalRecordingList* default_instance_;
};
// ===================================================================


// ===================================================================

// MinimalRecordingList

// repeated .scheduler.MinimalRecording recordings = 1;
inline int MinimalRecordingList::recordings_size() const {
  return recordings_.size();
}
inline void MinimalRecordingList::clear_recordings() {
  recordings_.Clear();
}
inline const ::scheduler::MinimalRecording& MinimalRecordingList::recordings(int index) const {
  return recordings_.Get(index);
}
inline ::scheduler::MinimalRecording* MinimalRecordingList::mutable_recordings(int index) {
  return recordings_.Mutable(index);
}
inline ::scheduler::MinimalRecording* MinimalRecordingList::add_recordings() {
  return recordings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::scheduler::MinimalRecording >&
MinimalRecordingList::recordings() const {
  return recordings_;
}
inline ::google::protobuf::RepeatedPtrField< ::scheduler::MinimalRecording >*
MinimalRecordingList::mutable_recordings() {
  return &recordings_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cache
}  // namespace scheduler

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cache_2fMinimalRecordingList_2eproto__INCLUDED
