// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RecordingOptions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

namespace {

const ::google::protobuf::Descriptor* RecordingOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RecordingOptions_2eproto() {
  protobuf_AddDesc_RecordingOptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RecordingOptions.proto");
  GOOGLE_CHECK(file != NULL);
  RecordingOptions_descriptor_ = file->message_type(0);
  static const int RecordingOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, episodeoptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, frequencyoptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, channeloptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, episodestokeep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, deletepriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, padbeforeseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, padafterseconds_),
  };
  RecordingOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingOptions_descriptor_,
      RecordingOptions::default_instance_,
      RecordingOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingOptions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RecordingOptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingOptions_descriptor_, &RecordingOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RecordingOptions_2eproto() {
  delete RecordingOptions::default_instance_;
  delete RecordingOptions_reflection_;
}

void protobuf_AddDesc_RecordingOptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_DeletePriority_2eproto();
  ::scheduler::protobuf_AddDesc_FrequencyOptions_2eproto();
  ::scheduler::protobuf_AddDesc_ChannelOptions_2eproto();
  ::scheduler::protobuf_AddDesc_EpisodeOptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026RecordingOptions.proto\022\tscheduler\032\024Del"
    "etePriority.proto\032\026FrequencyOptions.prot"
    "o\032\024ChannelOptions.proto\032\024EpisodeOptions."
    "proto\"\300\002\n\020RecordingOptions\0221\n\016episodeOpt"
    "ions\030\001 \001(\0162\031.scheduler.EpisodeOptions\0225\n"
    "\020frequencyOptions\030\002 \001(\0162\033.scheduler.Freq"
    "uencyOptions\0221\n\016channelOptions\030\003 \001(\0162\031.s"
    "cheduler.ChannelOptions\022\021\n\tchannelId\030\004 \001"
    "(\t\022\026\n\016episodesToKeep\030\005 \002(\005\0221\n\016deletePrio"
    "rity\030\006 \001(\0162\031.scheduler.DeletePriority\022\030\n"
    "\020padBeforeSeconds\030\007 \002(\003\022\027\n\017padAfterSecon"
    "ds\030\010 \002(\003BD\n+com.comcast.data.protobuf.me"
    "ssage.schedulerB\025RecordingOptionsProto", 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RecordingOptions.proto", &protobuf_RegisterTypes);
  RecordingOptions::default_instance_ = new RecordingOptions();
  RecordingOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RecordingOptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RecordingOptions_2eproto {
  StaticDescriptorInitializer_RecordingOptions_2eproto() {
    protobuf_AddDesc_RecordingOptions_2eproto();
  }
} static_descriptor_initializer_RecordingOptions_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RecordingOptions::kEpisodeOptionsFieldNumber;
const int RecordingOptions::kFrequencyOptionsFieldNumber;
const int RecordingOptions::kChannelOptionsFieldNumber;
const int RecordingOptions::kChannelIdFieldNumber;
const int RecordingOptions::kEpisodesToKeepFieldNumber;
const int RecordingOptions::kDeletePriorityFieldNumber;
const int RecordingOptions::kPadBeforeSecondsFieldNumber;
const int RecordingOptions::kPadAfterSecondsFieldNumber;
#endif  // !_MSC_VER

RecordingOptions::RecordingOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingOptions::InitAsDefaultInstance() {
}

RecordingOptions::RecordingOptions(const RecordingOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingOptions::SharedCtor() {
  _cached_size_ = 0;
  episodeoptions_ = 0;
  frequencyoptions_ = 0;
  channeloptions_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  episodestokeep_ = 0;
  deletepriority_ = 0;
  padbeforeseconds_ = GOOGLE_LONGLONG(0);
  padafterseconds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingOptions::~RecordingOptions() {
  SharedDtor();
}

void RecordingOptions::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void RecordingOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingOptions_descriptor_;
}

const RecordingOptions& RecordingOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordingOptions_2eproto();  return *default_instance_;
}

RecordingOptions* RecordingOptions::default_instance_ = NULL;

RecordingOptions* RecordingOptions::New() const {
  return new RecordingOptions;
}

void RecordingOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    episodeoptions_ = 0;
    frequencyoptions_ = 0;
    channeloptions_ = 0;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    episodestokeep_ = 0;
    deletepriority_ = 0;
    padbeforeseconds_ = GOOGLE_LONGLONG(0);
    padafterseconds_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .scheduler.EpisodeOptions episodeOptions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::EpisodeOptions_IsValid(value)) {
            set_episodeoptions(static_cast< scheduler::EpisodeOptions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frequencyOptions;
        break;
      }
      
      // optional .scheduler.FrequencyOptions frequencyOptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequencyOptions:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::FrequencyOptions_IsValid(value)) {
            set_frequencyoptions(static_cast< scheduler::FrequencyOptions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channelOptions;
        break;
      }
      
      // optional .scheduler.ChannelOptions channelOptions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelOptions:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::ChannelOptions_IsValid(value)) {
            set_channeloptions(static_cast< scheduler::ChannelOptions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channelId;
        break;
      }
      
      // optional string channelId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_episodesToKeep;
        break;
      }
      
      // required int32 episodesToKeep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_episodesToKeep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episodestokeep_)));
          set_has_episodestokeep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deletePriority;
        break;
      }
      
      // optional .scheduler.DeletePriority deletePriority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletePriority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::DeletePriority_IsValid(value)) {
            set_deletepriority(static_cast< scheduler::DeletePriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_padBeforeSeconds;
        break;
      }
      
      // required int64 padBeforeSeconds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padBeforeSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &padbeforeseconds_)));
          set_has_padbeforeseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_padAfterSeconds;
        break;
      }
      
      // required int64 padAfterSeconds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padAfterSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &padafterseconds_)));
          set_has_padafterseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .scheduler.EpisodeOptions episodeOptions = 1;
  if (has_episodeoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->episodeoptions(), output);
  }
  
  // optional .scheduler.FrequencyOptions frequencyOptions = 2;
  if (has_frequencyoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->frequencyoptions(), output);
  }
  
  // optional .scheduler.ChannelOptions channelOptions = 3;
  if (has_channeloptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channeloptions(), output);
  }
  
  // optional string channelId = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channelid(), output);
  }
  
  // required int32 episodesToKeep = 5;
  if (has_episodestokeep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->episodestokeep(), output);
  }
  
  // optional .scheduler.DeletePriority deletePriority = 6;
  if (has_deletepriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->deletepriority(), output);
  }
  
  // required int64 padBeforeSeconds = 7;
  if (has_padbeforeseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->padbeforeseconds(), output);
  }
  
  // required int64 padAfterSeconds = 8;
  if (has_padafterseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->padafterseconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .scheduler.EpisodeOptions episodeOptions = 1;
  if (has_episodeoptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->episodeoptions(), target);
  }
  
  // optional .scheduler.FrequencyOptions frequencyOptions = 2;
  if (has_frequencyoptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->frequencyoptions(), target);
  }
  
  // optional .scheduler.ChannelOptions channelOptions = 3;
  if (has_channeloptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channeloptions(), target);
  }
  
  // optional string channelId = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelid(), target);
  }
  
  // required int32 episodesToKeep = 5;
  if (has_episodestokeep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->episodestokeep(), target);
  }
  
  // optional .scheduler.DeletePriority deletePriority = 6;
  if (has_deletepriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->deletepriority(), target);
  }
  
  // required int64 padBeforeSeconds = 7;
  if (has_padbeforeseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->padbeforeseconds(), target);
  }
  
  // required int64 padAfterSeconds = 8;
  if (has_padafterseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->padafterseconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .scheduler.EpisodeOptions episodeOptions = 1;
    if (has_episodeoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->episodeoptions());
    }
    
    // optional .scheduler.FrequencyOptions frequencyOptions = 2;
    if (has_frequencyoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frequencyoptions());
    }
    
    // optional .scheduler.ChannelOptions channelOptions = 3;
    if (has_channeloptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeloptions());
    }
    
    // optional string channelId = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required int32 episodesToKeep = 5;
    if (has_episodestokeep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episodestokeep());
    }
    
    // optional .scheduler.DeletePriority deletePriority = 6;
    if (has_deletepriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deletepriority());
    }
    
    // required int64 padBeforeSeconds = 7;
    if (has_padbeforeseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->padbeforeseconds());
    }
    
    // required int64 padAfterSeconds = 8;
    if (has_padafterseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->padafterseconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingOptions::MergeFrom(const RecordingOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episodeoptions()) {
      set_episodeoptions(from.episodeoptions());
    }
    if (from.has_frequencyoptions()) {
      set_frequencyoptions(from.frequencyoptions());
    }
    if (from.has_channeloptions()) {
      set_channeloptions(from.channeloptions());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_episodestokeep()) {
      set_episodestokeep(from.episodestokeep());
    }
    if (from.has_deletepriority()) {
      set_deletepriority(from.deletepriority());
    }
    if (from.has_padbeforeseconds()) {
      set_padbeforeseconds(from.padbeforeseconds());
    }
    if (from.has_padafterseconds()) {
      set_padafterseconds(from.padafterseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingOptions::CopyFrom(const RecordingOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000d0) != 0x000000d0) return false;
  
  return true;
}

void RecordingOptions::Swap(RecordingOptions* other) {
  if (other != this) {
    std::swap(episodeoptions_, other->episodeoptions_);
    std::swap(frequencyoptions_, other->frequencyoptions_);
    std::swap(channeloptions_, other->channeloptions_);
    std::swap(channelid_, other->channelid_);
    std::swap(episodestokeep_, other->episodestokeep_);
    std::swap(deletepriority_, other->deletepriority_);
    std::swap(padbeforeseconds_, other->padbeforeseconds_);
    std::swap(padafterseconds_, other->padafterseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingOptions_descriptor_;
  metadata.reflection = RecordingOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
