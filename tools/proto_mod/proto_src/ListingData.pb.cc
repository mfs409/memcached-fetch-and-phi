// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ListingData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scheduler {

namespace {

const ::google::protobuf::Descriptor* ListingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListingData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ListingData_2eproto() {
  protobuf_AddDesc_ListingData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ListingData.proto");
  GOOGLE_CHECK(file != NULL);
  ListingData_descriptor_ = file->message_type(0);
  static const int ListingData_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, airingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, audiotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, captiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, schedulercontentrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, isadult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, hdlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, seriesguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, showingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, issap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, issubtitled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, isthreed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, programguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, programstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, programend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, listingguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, seasonnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, episodenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, episodetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, strprogramtype_),
  };
  ListingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListingData_descriptor_,
      ListingData::default_instance_,
      ListingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListingData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ListingData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListingData_descriptor_, &ListingData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ListingData_2eproto() {
  delete ListingData::default_instance_;
  delete ListingData_reflection_;
}

void protobuf_AddDesc_ListingData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::scheduler::protobuf_AddDesc_AiringType_2eproto();
  ::scheduler::protobuf_AddDesc_Rating_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ListingData.proto\022\tscheduler\032\020AiringTy"
    "pe.proto\032\014Rating.proto\"\303\003\n\013ListingData\022)"
    "\n\nairingType\030\001 \001(\0162\025.scheduler.AiringTyp"
    "e\022\021\n\taudioType\030\002 \001(\t\022\023\n\013captionType\030\003 \001("
    "\t\0221\n\026schedulerContentRating\030\004 \001(\0132\021.sche"
    "duler.Rating\022\017\n\007isAdult\030\005 \002(\010\022\017\n\007hdLevel"
    "\030\006 \001(\t\022\022\n\nseriesGuid\030\007 \001(\t\022\023\n\013showingTyp"
    "e\030\010 \001(\t\022\r\n\005isSAP\030\t \002(\010\022\023\n\013isSubTitled\030\n "
    "\002(\010\022\020\n\010isThreeD\030\013 \002(\010\022\023\n\013programGuid\030\014 \001"
    "(\t\022\024\n\014programStart\030\r \002(\003\022\022\n\nprogramEnd\030\016"
    " \002(\003\022\023\n\013listingGuid\030\017 \001(\t\022\024\n\014seasonNumbe"
    "r\030\020 \001(\005\022\025\n\repisodeNumber\030\021 \001(\005\022\024\n\014episod"
    "eTitle\030\022 \001(\t\022\026\n\016strProgramType\030\023 \001(\tB\?\n+"
    "com.comcast.data.protobuf.message.schedu"
    "lerB\020ListingDataProto", 581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ListingData.proto", &protobuf_RegisterTypes);
  ListingData::default_instance_ = new ListingData();
  ListingData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ListingData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ListingData_2eproto {
  StaticDescriptorInitializer_ListingData_2eproto() {
    protobuf_AddDesc_ListingData_2eproto();
  }
} static_descriptor_initializer_ListingData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ListingData::kAiringTypeFieldNumber;
const int ListingData::kAudioTypeFieldNumber;
const int ListingData::kCaptionTypeFieldNumber;
const int ListingData::kSchedulerContentRatingFieldNumber;
const int ListingData::kIsAdultFieldNumber;
const int ListingData::kHdLevelFieldNumber;
const int ListingData::kSeriesGuidFieldNumber;
const int ListingData::kShowingTypeFieldNumber;
const int ListingData::kIsSAPFieldNumber;
const int ListingData::kIsSubTitledFieldNumber;
const int ListingData::kIsThreeDFieldNumber;
const int ListingData::kProgramGuidFieldNumber;
const int ListingData::kProgramStartFieldNumber;
const int ListingData::kProgramEndFieldNumber;
const int ListingData::kListingGuidFieldNumber;
const int ListingData::kSeasonNumberFieldNumber;
const int ListingData::kEpisodeNumberFieldNumber;
const int ListingData::kEpisodeTitleFieldNumber;
const int ListingData::kStrProgramTypeFieldNumber;
#endif  // !_MSC_VER

ListingData::ListingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListingData::InitAsDefaultInstance() {
  schedulercontentrating_ = const_cast< ::scheduler::Rating*>(&::scheduler::Rating::default_instance());
}

ListingData::ListingData(const ListingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListingData::SharedCtor() {
  _cached_size_ = 0;
  airingtype_ = 0;
  audiotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schedulercontentrating_ = NULL;
  isadult_ = false;
  hdlevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  showingtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issap_ = false;
  issubtitled_ = false;
  isthreed_ = false;
  programguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  programstart_ = GOOGLE_LONGLONG(0);
  programend_ = GOOGLE_LONGLONG(0);
  listingguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seasonnumber_ = 0;
  episodenumber_ = 0;
  episodetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strprogramtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListingData::~ListingData() {
  SharedDtor();
}

void ListingData::SharedDtor() {
  if (audiotype_ != &::google::protobuf::internal::kEmptyString) {
    delete audiotype_;
  }
  if (captiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete captiontype_;
  }
  if (hdlevel_ != &::google::protobuf::internal::kEmptyString) {
    delete hdlevel_;
  }
  if (seriesguid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesguid_;
  }
  if (showingtype_ != &::google::protobuf::internal::kEmptyString) {
    delete showingtype_;
  }
  if (programguid_ != &::google::protobuf::internal::kEmptyString) {
    delete programguid_;
  }
  if (listingguid_ != &::google::protobuf::internal::kEmptyString) {
    delete listingguid_;
  }
  if (episodetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete episodetitle_;
  }
  if (strprogramtype_ != &::google::protobuf::internal::kEmptyString) {
    delete strprogramtype_;
  }
  if (this != default_instance_) {
    delete schedulercontentrating_;
  }
}

void ListingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListingData_descriptor_;
}

const ListingData& ListingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ListingData_2eproto();  return *default_instance_;
}

ListingData* ListingData::default_instance_ = NULL;

ListingData* ListingData::New() const {
  return new ListingData;
}

void ListingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    airingtype_ = 0;
    if (has_audiotype()) {
      if (audiotype_ != &::google::protobuf::internal::kEmptyString) {
        audiotype_->clear();
      }
    }
    if (has_captiontype()) {
      if (captiontype_ != &::google::protobuf::internal::kEmptyString) {
        captiontype_->clear();
      }
    }
    if (has_schedulercontentrating()) {
      if (schedulercontentrating_ != NULL) schedulercontentrating_->::scheduler::Rating::Clear();
    }
    isadult_ = false;
    if (has_hdlevel()) {
      if (hdlevel_ != &::google::protobuf::internal::kEmptyString) {
        hdlevel_->clear();
      }
    }
    if (has_seriesguid()) {
      if (seriesguid_ != &::google::protobuf::internal::kEmptyString) {
        seriesguid_->clear();
      }
    }
    if (has_showingtype()) {
      if (showingtype_ != &::google::protobuf::internal::kEmptyString) {
        showingtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    issap_ = false;
    issubtitled_ = false;
    isthreed_ = false;
    if (has_programguid()) {
      if (programguid_ != &::google::protobuf::internal::kEmptyString) {
        programguid_->clear();
      }
    }
    programstart_ = GOOGLE_LONGLONG(0);
    programend_ = GOOGLE_LONGLONG(0);
    if (has_listingguid()) {
      if (listingguid_ != &::google::protobuf::internal::kEmptyString) {
        listingguid_->clear();
      }
    }
    seasonnumber_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    episodenumber_ = 0;
    if (has_episodetitle()) {
      if (episodetitle_ != &::google::protobuf::internal::kEmptyString) {
        episodetitle_->clear();
      }
    }
    if (has_strprogramtype()) {
      if (strprogramtype_ != &::google::protobuf::internal::kEmptyString) {
        strprogramtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .scheduler.AiringType airingType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (scheduler::AiringType_IsValid(value)) {
            set_airingtype(static_cast< scheduler::AiringType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audioType;
        break;
      }
      
      // optional string audioType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiotype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audiotype().data(), this->audiotype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_captionType;
        break;
      }
      
      // optional string captionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->captiontype().data(), this->captiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_schedulerContentRating;
        break;
      }
      
      // optional .scheduler.Rating schedulerContentRating = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schedulerContentRating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedulercontentrating()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAdult;
        break;
      }
      
      // required bool isAdult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hdLevel;
        break;
      }
      
      // optional string hdLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hdLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdlevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hdlevel().data(), this->hdlevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_seriesGuid;
        break;
      }
      
      // optional string seriesGuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesguid().data(), this->seriesguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_showingType;
        break;
      }
      
      // optional string showingType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showingType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showingtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->showingtype().data(), this->showingtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isSAP;
        break;
      }
      
      // required bool isSAP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSAP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issap_)));
          set_has_issap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isSubTitled;
        break;
      }
      
      // required bool isSubTitled = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSubTitled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubtitled_)));
          set_has_issubtitled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isThreeD;
        break;
      }
      
      // required bool isThreeD = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isThreeD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isthreed_)));
          set_has_isthreed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_programGuid;
        break;
      }
      
      // optional string programGuid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_programGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_programguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->programguid().data(), this->programguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_programStart;
        break;
      }
      
      // required int64 programStart = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_programStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &programstart_)));
          set_has_programstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_programEnd;
        break;
      }
      
      // required int64 programEnd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_programEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &programend_)));
          set_has_programend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_listingGuid;
        break;
      }
      
      // optional string listingGuid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listingGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listingguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listingguid().data(), this->listingguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_seasonNumber;
        break;
      }
      
      // optional int32 seasonNumber = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seasonNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasonnumber_)));
          set_has_seasonnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_episodeNumber;
        break;
      }
      
      // optional int32 episodeNumber = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_episodeNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episodenumber_)));
          set_has_episodenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_episodeTitle;
        break;
      }
      
      // optional string episodeTitle = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_episodeTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_episodetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->episodetitle().data(), this->episodetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_strProgramType;
        break;
      }
      
      // optional string strProgramType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strProgramType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strprogramtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strprogramtype().data(), this->strprogramtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .scheduler.AiringType airingType = 1;
  if (has_airingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->airingtype(), output);
  }
  
  // optional string audioType = 2;
  if (has_audiotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiotype().data(), this->audiotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->audiotype(), output);
  }
  
  // optional string captionType = 3;
  if (has_captiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captiontype().data(), this->captiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->captiontype(), output);
  }
  
  // optional .scheduler.Rating schedulerContentRating = 4;
  if (has_schedulercontentrating()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->schedulercontentrating(), output);
  }
  
  // required bool isAdult = 5;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isadult(), output);
  }
  
  // optional string hdLevel = 6;
  if (has_hdlevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdlevel().data(), this->hdlevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hdlevel(), output);
  }
  
  // optional string seriesGuid = 7;
  if (has_seriesguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesguid().data(), this->seriesguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->seriesguid(), output);
  }
  
  // optional string showingType = 8;
  if (has_showingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showingtype().data(), this->showingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->showingtype(), output);
  }
  
  // required bool isSAP = 9;
  if (has_issap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->issap(), output);
  }
  
  // required bool isSubTitled = 10;
  if (has_issubtitled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->issubtitled(), output);
  }
  
  // required bool isThreeD = 11;
  if (has_isthreed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isthreed(), output);
  }
  
  // optional string programGuid = 12;
  if (has_programguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->programguid().data(), this->programguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->programguid(), output);
  }
  
  // required int64 programStart = 13;
  if (has_programstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->programstart(), output);
  }
  
  // required int64 programEnd = 14;
  if (has_programend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->programend(), output);
  }
  
  // optional string listingGuid = 15;
  if (has_listingguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listingguid().data(), this->listingguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->listingguid(), output);
  }
  
  // optional int32 seasonNumber = 16;
  if (has_seasonnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->seasonnumber(), output);
  }
  
  // optional int32 episodeNumber = 17;
  if (has_episodenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->episodenumber(), output);
  }
  
  // optional string episodeTitle = 18;
  if (has_episodetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->episodetitle().data(), this->episodetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->episodetitle(), output);
  }
  
  // optional string strProgramType = 19;
  if (has_strprogramtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strprogramtype().data(), this->strprogramtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->strprogramtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .scheduler.AiringType airingType = 1;
  if (has_airingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->airingtype(), target);
  }
  
  // optional string audioType = 2;
  if (has_audiotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiotype().data(), this->audiotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audiotype(), target);
  }
  
  // optional string captionType = 3;
  if (has_captiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captiontype().data(), this->captiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->captiontype(), target);
  }
  
  // optional .scheduler.Rating schedulerContentRating = 4;
  if (has_schedulercontentrating()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->schedulercontentrating(), target);
  }
  
  // required bool isAdult = 5;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isadult(), target);
  }
  
  // optional string hdLevel = 6;
  if (has_hdlevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdlevel().data(), this->hdlevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hdlevel(), target);
  }
  
  // optional string seriesGuid = 7;
  if (has_seriesguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesguid().data(), this->seriesguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->seriesguid(), target);
  }
  
  // optional string showingType = 8;
  if (has_showingtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showingtype().data(), this->showingtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->showingtype(), target);
  }
  
  // required bool isSAP = 9;
  if (has_issap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->issap(), target);
  }
  
  // required bool isSubTitled = 10;
  if (has_issubtitled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->issubtitled(), target);
  }
  
  // required bool isThreeD = 11;
  if (has_isthreed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isthreed(), target);
  }
  
  // optional string programGuid = 12;
  if (has_programguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->programguid().data(), this->programguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->programguid(), target);
  }
  
  // required int64 programStart = 13;
  if (has_programstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->programstart(), target);
  }
  
  // required int64 programEnd = 14;
  if (has_programend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->programend(), target);
  }
  
  // optional string listingGuid = 15;
  if (has_listingguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listingguid().data(), this->listingguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->listingguid(), target);
  }
  
  // optional int32 seasonNumber = 16;
  if (has_seasonnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->seasonnumber(), target);
  }
  
  // optional int32 episodeNumber = 17;
  if (has_episodenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->episodenumber(), target);
  }
  
  // optional string episodeTitle = 18;
  if (has_episodetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->episodetitle().data(), this->episodetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->episodetitle(), target);
  }
  
  // optional string strProgramType = 19;
  if (has_strprogramtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strprogramtype().data(), this->strprogramtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->strprogramtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListingData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .scheduler.AiringType airingType = 1;
    if (has_airingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->airingtype());
    }
    
    // optional string audioType = 2;
    if (has_audiotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audiotype());
    }
    
    // optional string captionType = 3;
    if (has_captiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captiontype());
    }
    
    // optional .scheduler.Rating schedulerContentRating = 4;
    if (has_schedulercontentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedulercontentrating());
    }
    
    // required bool isAdult = 5;
    if (has_isadult()) {
      total_size += 1 + 1;
    }
    
    // optional string hdLevel = 6;
    if (has_hdlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdlevel());
    }
    
    // optional string seriesGuid = 7;
    if (has_seriesguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesguid());
    }
    
    // optional string showingType = 8;
    if (has_showingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showingtype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool isSAP = 9;
    if (has_issap()) {
      total_size += 1 + 1;
    }
    
    // required bool isSubTitled = 10;
    if (has_issubtitled()) {
      total_size += 1 + 1;
    }
    
    // required bool isThreeD = 11;
    if (has_isthreed()) {
      total_size += 1 + 1;
    }
    
    // optional string programGuid = 12;
    if (has_programguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->programguid());
    }
    
    // required int64 programStart = 13;
    if (has_programstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->programstart());
    }
    
    // required int64 programEnd = 14;
    if (has_programend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->programend());
    }
    
    // optional string listingGuid = 15;
    if (has_listingguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listingguid());
    }
    
    // optional int32 seasonNumber = 16;
    if (has_seasonnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seasonnumber());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 episodeNumber = 17;
    if (has_episodenumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episodenumber());
    }
    
    // optional string episodeTitle = 18;
    if (has_episodetitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->episodetitle());
    }
    
    // optional string strProgramType = 19;
    if (has_strprogramtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strprogramtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListingData::MergeFrom(const ListingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_airingtype()) {
      set_airingtype(from.airingtype());
    }
    if (from.has_audiotype()) {
      set_audiotype(from.audiotype());
    }
    if (from.has_captiontype()) {
      set_captiontype(from.captiontype());
    }
    if (from.has_schedulercontentrating()) {
      mutable_schedulercontentrating()->::scheduler::Rating::MergeFrom(from.schedulercontentrating());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
    if (from.has_hdlevel()) {
      set_hdlevel(from.hdlevel());
    }
    if (from.has_seriesguid()) {
      set_seriesguid(from.seriesguid());
    }
    if (from.has_showingtype()) {
      set_showingtype(from.showingtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_issap()) {
      set_issap(from.issap());
    }
    if (from.has_issubtitled()) {
      set_issubtitled(from.issubtitled());
    }
    if (from.has_isthreed()) {
      set_isthreed(from.isthreed());
    }
    if (from.has_programguid()) {
      set_programguid(from.programguid());
    }
    if (from.has_programstart()) {
      set_programstart(from.programstart());
    }
    if (from.has_programend()) {
      set_programend(from.programend());
    }
    if (from.has_listingguid()) {
      set_listingguid(from.listingguid());
    }
    if (from.has_seasonnumber()) {
      set_seasonnumber(from.seasonnumber());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_episodenumber()) {
      set_episodenumber(from.episodenumber());
    }
    if (from.has_episodetitle()) {
      set_episodetitle(from.episodetitle());
    }
    if (from.has_strprogramtype()) {
      set_strprogramtype(from.strprogramtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListingData::CopyFrom(const ListingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003710) != 0x00003710) return false;
  
  return true;
}

void ListingData::Swap(ListingData* other) {
  if (other != this) {
    std::swap(airingtype_, other->airingtype_);
    std::swap(audiotype_, other->audiotype_);
    std::swap(captiontype_, other->captiontype_);
    std::swap(schedulercontentrating_, other->schedulercontentrating_);
    std::swap(isadult_, other->isadult_);
    std::swap(hdlevel_, other->hdlevel_);
    std::swap(seriesguid_, other->seriesguid_);
    std::swap(showingtype_, other->showingtype_);
    std::swap(issap_, other->issap_);
    std::swap(issubtitled_, other->issubtitled_);
    std::swap(isthreed_, other->isthreed_);
    std::swap(programguid_, other->programguid_);
    std::swap(programstart_, other->programstart_);
    std::swap(programend_, other->programend_);
    std::swap(listingguid_, other->listingguid_);
    std::swap(seasonnumber_, other->seasonnumber_);
    std::swap(episodenumber_, other->episodenumber_);
    std::swap(episodetitle_, other->episodetitle_);
    std::swap(strprogramtype_, other->strprogramtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListingData_descriptor_;
  metadata.reflection = ListingData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler

// @@protoc_insertion_point(global_scope)
